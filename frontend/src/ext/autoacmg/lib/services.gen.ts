// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { PredictSeqvarApiV1PredictSeqvarGetData, PredictSeqvarApiV1PredictSeqvarGetError, PredictSeqvarApiV1PredictSeqvarGetResponse, PredictStrucvarApiV1PredictStrucvarGetData, PredictStrucvarApiV1PredictStrucvarGetError, PredictStrucvarApiV1PredictStrucvarGetResponse, ResolveVariantApiV1ResolveGetData, ResolveVariantApiV1ResolveGetError, ResolveVariantApiV1ResolveGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Predict Seqvar
 * Predict the ACMG classification of a sequence variant.
 *
 * Args:
 * variant_name (str): The name or identifier of the sequence variant.
 * genome_release (str): The genome release version.
 *
 * Returns:
 * SeqVarPredictionResponse: The predicted ACMG classification.
 */
export const predictSeqvarApiV1PredictSeqvarGet = <ThrowOnError extends boolean = false>(options: Options<PredictSeqvarApiV1PredictSeqvarGetData, ThrowOnError>) => { return (options?.client ?? client).get<PredictSeqvarApiV1PredictSeqvarGetResponse, PredictSeqvarApiV1PredictSeqvarGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/predict/seqvar'
}); };

/**
 * Predict Strucvar
 * Predict the ACMG classification of a structural variant.
 *
 * Args:
 * variant_name (str): The name or identifier of the structural variant.
 * genome_release (str): The genome release version.
 * duplication_tandem (bool): The duplication is in tandem and disrupts reading frame and undergoes NMD.
 *
 * Returns:
 * StrucVarPredictionResponse: The predicted ACMG classification.
 */
export const predictStrucvarApiV1PredictStrucvarGet = <ThrowOnError extends boolean = false>(options: Options<PredictStrucvarApiV1PredictStrucvarGetData, ThrowOnError>) => { return (options?.client ?? client).get<PredictStrucvarApiV1PredictStrucvarGetResponse, PredictStrucvarApiV1PredictStrucvarGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/predict/strucvar'
}); };

/**
 * Resolve Variant
 * Resolve a variant to a sequence variant or structural variant.
 *
 * Args:
 * variant_name (str): The name or identifier of the variant.
 * genome_release (str): The genome release version.
 *
 * Returns:
 * VariantResolveResponse: The resolved variant.
 */
export const resolveVariantApiV1ResolveGet = <ThrowOnError extends boolean = false>(options: Options<ResolveVariantApiV1ResolveGetData, ThrowOnError>) => { return (options?.client ?? client).get<ResolveVariantApiV1ResolveGetResponse, ResolveVariantApiV1ResolveGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/resolve'
}); };