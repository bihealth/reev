// This file is auto-generated by @hey-api/openapi-ts

export type ApiAutoACMGSeqVarData = {
    /**
     * The CDS end position of the sequence variant
     */
    cds_end: number;
    /**
     * The CDS position of the sequence variant
     */
    cds_pos: number;
    /**
     * The CDS start position of the sequence variant
     */
    cds_start: number;
    /**
     * The consequence of the sequence variant
     */
    consequence: AutoACMGConsequence;
    /**
     * The gene symbol of the sequence variant
     */
    gene_symbol: string;
    /**
     * The HGNC ID of the sequence variant
     */
    hgnc_id: string;
    /**
     * The pHGVS notation of the sequence variant
     */
    pHGVS: string;
    /**
     * The protein length of the sequence variant
     */
    prot_length: number;
    /**
     * The protein position of the sequence variant
     */
    prot_pos: number;
    /**
     * The scores of the sequence variant
     */
    scores: AutoACMGSeqVarScores;
    /**
     * The strand of the sequence variant
     */
    strand: GenomicStrand;
    /**
     * The thresholds of the sequence variant
     */
    thresholds: AutoACMGSeqVarTresholds;
    /**
     * The transcript ID of the sequence variant
     */
    transcript_id: string;
    /**
     * The transcript tags of the sequence variant
     */
    transcript_tags: Array<(string)>;
    /**
     * The transcript position in the UTR of the sequence variant
     */
    tx_pos_utr: number;
};

export type ApiAutoACMGSeqVarResult = {
    criteria: AutoACMGCriteriaPred;
    data: ApiAutoACMGSeqVarData;
    seqvar: SeqVar;
};

export type AutoACMGCADD = {
    ada?: (number | null);
    gerp?: (number | null);
    phyloP100?: (number | null);
    rf?: (number | null);
    spliceAI_acceptor_gain?: (number | null);
    spliceAI_acceptor_loss?: (number | null);
    spliceAI_donor_gain?: (number | null);
    spliceAI_donor_loss?: (number | null);
};

export type AutoACMGConsequence = {
    cadd?: string;
    cadd_consequence?: string;
    mehari?: Array<(string)>;
};

/**
 * Criteria prediction.
 */
export type AutoACMGCriteria = {
    description?: string;
    name: string;
    prediction?: AutoACMGPrediction;
    strength?: AutoACMGStrength;
    summary?: string;
};

/**
 * ACMG criteria prediction.
 */
export type AutoACMGCriteriaPred = {
    ba1?: AutoACMGCriteria;
    bp1?: AutoACMGCriteria;
    bp2?: AutoACMGCriteria;
    bp3?: AutoACMGCriteria;
    bp4?: AutoACMGCriteria;
    bp5?: AutoACMGCriteria;
    bp6?: AutoACMGCriteria;
    bp7?: AutoACMGCriteria;
    bs1?: AutoACMGCriteria;
    bs2?: AutoACMGCriteria;
    bs3?: AutoACMGCriteria;
    bs4?: AutoACMGCriteria;
    pm1?: AutoACMGCriteria;
    pm2?: AutoACMGCriteria;
    pm3?: AutoACMGCriteria;
    pm4?: AutoACMGCriteria;
    pm5?: AutoACMGCriteria;
    pm6?: AutoACMGCriteria;
    pp1?: AutoACMGCriteria;
    pp2?: AutoACMGCriteria;
    pp3?: AutoACMGCriteria;
    pp4?: AutoACMGCriteria;
    pp5?: AutoACMGCriteria;
    ps1?: AutoACMGCriteria;
    ps2?: AutoACMGCriteria;
    ps3?: AutoACMGCriteria;
    ps4?: AutoACMGCriteria;
    pvs1?: AutoACMGCriteria;
};

export type AutoACMGDbnsfp = {
    alpha_missense?: (number | null);
    bayesDel_noAF?: (number | null);
    fathmm?: (number | null);
    metaRNN?: (number | null);
    mutationTaster?: (number | null);
    mutpred?: (number | null);
    phyloP100?: (number | null);
    polyphen2?: (number | null);
    primateAI?: (number | null);
    provean?: (number | null);
    revel?: (number | null);
    sift?: (number | null);
    vest4?: (number | null);
};

export type AutoACMGDbscsnv = {
    ada?: (number | null);
    rf?: (number | null);
};

/**
 * ACMG criteria prediction enumeration.
 */
export type AutoACMGPrediction = 'not_set' | 'applicable' | 'not_applicable' | 'not_automated' | 'deprecated' | 'failed';

/**
 * ACMG scores.
 */
export type AutoACMGSeqVarScores = {
    cadd?: AutoACMGCADD;
    dbnsfp?: AutoACMGDbnsfp;
    dbscsnv?: AutoACMGDbscsnv;
    misZ?: (number | null);
};

/**
 * ACMG thresholds.
 */
export type AutoACMGSeqVarTresholds = {
    ada?: number;
    an_min?: number;
    ba1_benign?: number;
    bayesDel_noAF_benign?: number;
    bayesDel_noAF_pathogenic?: number;
    bp7_acceptor?: number;
    bp7_donor?: number;
    bs1_benign?: number;
    cadd_benign?: number;
    cadd_pathogenic?: number;
    gerp?: number;
    metaRNN_benign?: number;
    metaRNN_pathogenic?: number;
    phyloP100?: number;
    pm1_pathogenic?: number;
    pm2_pathogenic?: number;
    pp2bp1_benign?: number;
    pp2bp1_pathogenic?: number;
    pp3bp4_strategy?: string;
    revel_benign?: number;
    revel_pathogenic?: number;
    rf?: number;
    spliceAI_acceptor_gain?: number;
    spliceAI_acceptor_loss?: number;
    spliceAI_donor_gain?: number;
    spliceAI_donor_loss?: number;
};

/**
 * ACMG criteria strength enumeration.
 */
export type AutoACMGStrength = 'not_set' | 'pathogenic_very_strong' | 'pathogenic_strong' | 'pathogenic_moderate' | 'pathogenic_supporting' | 'benign_stand_alone' | 'benign_strong' | 'benign_supporting';

export type AutoACMGStrucVarData = {
    exons?: Array<Exon>;
    gene_symbol?: string;
    hgnc_id?: string;
    start_cdn?: number;
    stop_cdn?: number;
    strand?: GenomicStrand;
    transcript_id?: string;
    transcript_tags?: Array<(string)>;
};

export type AutoACMGStrucVarPred = {
    pvs1?: AutoACMGCriteria;
};

/**
 * Response of the ACMG criteria prediction for structural variants.
 */
export type AutoACMGStrucVarResult = {
    criteria?: AutoACMGStrucVarPred;
    data?: AutoACMGStrucVarData;
    strucvar?: (StrucVar | null);
};

export type Exon = {
    altCdsEndI: number;
    altCdsStartI: number;
    altEndI: number;
    altStartI: number;
    cigar?: (string | null);
    ord?: (number | null);
};

/**
 * Enumeration for allowed genome release values.
 */
export type GenomeRelease = 'GRCh37' | 'GRCh38';

/**
 * Genomic strand enumeration.
 */
export type GenomicStrand = 'plus' | 'minus' | 'not_set';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type SeqVar = {
    chrom: string;
    delete: string;
    genome_release: GenomeRelease;
    insert: string;
    pos: number;
    user_repr?: (string | null);
};

export type SeqVarPredictionResponse = {
    /**
     * The prediction result for the sequence variant
     */
    prediction: ApiAutoACMGSeqVarResult;
};

export type StrucVar = {
    chrom: string;
    genome_release: GenomeRelease;
    start: number;
    stop: number;
    sv_type: StrucVarType;
    user_repr?: (string | null);
};

export type StrucVarPredictionResponse = {
    /**
     * The prediction result for the structural variant
     */
    prediction: AutoACMGStrucVarResult;
};

/**
 * Enumeration for structural variant type.
 */
export type StrucVarType = 1 | 2;

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type VariantResolveResponse = {
    /**
     * The resolved variant
     */
    resolved_variant: (SeqVar | StrucVar);
    /**
     * The type of the variant (sequence or structural)
     */
    variant_type: string;
};

export type PredictSeqvarApiV1PredictSeqvarGetData = {
    query: {
        /**
         * The genome release version
         */
        genome_release?: string;
        /**
         * The name or identifier of the sequence variant
         */
        variant_name: string;
    };
};

export type PredictSeqvarApiV1PredictSeqvarGetResponse = (SeqVarPredictionResponse);

export type PredictSeqvarApiV1PredictSeqvarGetError = (HTTPValidationError);

export type PredictStrucvarApiV1PredictStrucvarGetData = {
    query: {
        /**
         * The duplication is in tandem and disrupts reading frame and undergoes NMD
         */
        duplication_tandem?: boolean;
        /**
         * The genome release version
         */
        genome_release?: string;
        /**
         * The name or identifier of the structural variant
         */
        variant_name: string;
    };
};

export type PredictStrucvarApiV1PredictStrucvarGetResponse = (StrucVarPredictionResponse);

export type PredictStrucvarApiV1PredictStrucvarGetError = (HTTPValidationError);

export type ResolveVariantApiV1ResolveGetData = {
    query: {
        /**
         * The genome release version
         */
        genome_release?: string;
        /**
         * The name or identifier of the variant
         */
        variant_name: string;
    };
};

export type ResolveVariantApiV1ResolveGetResponse = (VariantResolveResponse);

export type ResolveVariantApiV1ResolveGetError = (HTTPValidationError);