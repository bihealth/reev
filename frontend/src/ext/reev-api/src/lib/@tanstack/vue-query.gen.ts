// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/vue-query';
import type { CreateAcmgseqvarApiV1AcmgseqvarCreatePostData, CreateAcmgseqvarApiV1AcmgseqvarCreatePostError, CreateAcmgseqvarApiV1AcmgseqvarCreatePostResponse, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteData, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteError, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteResponse, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteData, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteError, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteResponse, GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData, GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData, ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData, ListAcmgseqvarsApiV1AcmgseqvarListAllGetData, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchData, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchError, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutData, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutError, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutResponse, ReadAdminmsgsApiV1AdminmsgsGetData, AuthBearerLoginApiV1AuthBearerLoginPostData, AuthBearerLoginApiV1AuthBearerLoginPostError, AuthBearerLoginApiV1AuthBearerLoginPostResponse, AuthBearerLogoutApiV1AuthBearerLogoutPostError, AuthBearerLogoutApiV1AuthBearerLogoutPostResponse, AuthCookieLoginApiV1AuthCookieLoginPostData, AuthCookieLoginApiV1AuthCookieLoginPostError, AuthCookieLoginApiV1AuthCookieLoginPostResponse, AuthCookieLogoutApiV1AuthCookieLogoutPostError, AuthCookieLogoutApiV1AuthCookieLogoutPostResponse, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostError, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse, VerifyVerifyApiV1AuthVerifyPostData, VerifyVerifyApiV1AuthVerifyPostError, VerifyVerifyApiV1AuthVerifyPostResponse, CreateBookmarkApiV1BookmarksCreatePostData, CreateBookmarkApiV1BookmarksCreatePostError, CreateBookmarkApiV1BookmarksCreatePostResponse, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteData, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteError, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteResponse, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteData, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteError, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteResponse, GetBookmarkForUserApiV1BookmarksGetGetData, GetBookmarkApiV1BookmarksGetByIdGetData, ListBookmarksForUserApiV1BookmarksListGetData, ListBookmarksApiV1BookmarksListAllGetData, CreateCaseinfoApiV1CaseinfoCreatePostData, CreateCaseinfoApiV1CaseinfoCreatePostError, CreateCaseinfoApiV1CaseinfoCreatePostResponse, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteData, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteError, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteResponse, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteData, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteError, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteResponse, GetCaseinfoForUserApiV1CaseinfoGetGetData, GetCaseinfoApiV1CaseinfoGetByIdGetData, ListCaseinfosApiV1CaseinfoListAllGetData, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchData, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchError, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutData, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutError, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutResponse, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutData, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutError, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutResponse, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetError, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostError, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostResponse, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteData, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteError, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteResponse, GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutData, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutError, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutResponse, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetError, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostError, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostResponse, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetError, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostError, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostResponse, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteData, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteError, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteResponse, GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutData, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutError, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutResponse, UsersPatchCurrentUserApiV1UsersMePatchData, UsersPatchCurrentUserApiV1UsersMePatchError, UsersPatchCurrentUserApiV1UsersMePatchResponse, UsersDeleteUserApiV1UsersIdDeleteData, UsersDeleteUserApiV1UsersIdDeleteError, UsersDeleteUserApiV1UsersIdDeleteResponse, UsersUserApiV1UsersIdGetData, UsersPatchUserApiV1UsersIdPatchData, UsersPatchUserApiV1UsersIdPatchError, UsersPatchUserApiV1UsersIdPatchResponse, TestEmailApiV1UtilsTestEmailPostData, TestEmailApiV1UtilsTestEmailPostError, TestEmailApiV1UtilsTestEmailPostResponse, DataVersionsInternalDataVersionsPostError, DataVersionsInternalDataVersionsPostResponse, FrontendSettingsInternalFrontendSettingsPostError, FrontendSettingsInternalFrontendSettingsPostResponse, ReverseProxyInternalProxyPathPostError, ReverseProxyInternalProxyPathPostResponse, Pubtator3ApiInternalRemotePubtator3ApiPathGetData, VariantvalidatorInternalRemoteVariantvalidatorPathGetData, VersionInternalVersionPostError, VersionInternalVersionPostResponse } from '../types.gen';
import { client, createAcmgseqvarApiV1AcmgseqvarCreatePost, deleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDelete, deleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDelete, getAcmgseqvarByUserApiV1AcmgseqvarGetGet, getAcmgseqvarApiV1AcmgseqvarGetByIdGet, listAcmgseqvarsByUserApiV1AcmgseqvarListGet, listAcmgseqvarsApiV1AcmgseqvarListAllGet, updateAcmgseqvarApiV1AcmgseqvarUpdatePatch, updateAcmgseqvarApiV1AcmgseqvarUpdatePut, readAdminmsgsApiV1AdminmsgsGet, authBearerLoginApiV1AuthBearerLoginPost, authBearerLogoutApiV1AuthBearerLogoutPost, authCookieLoginApiV1AuthCookieLoginPost, authCookieLogoutApiV1AuthCookieLogoutPost, listOauth2ProvidersApiV1AuthOauth2ProvidersGet, verifyRequestTokenApiV1AuthRequestVerifyTokenPost, verifyVerifyApiV1AuthVerifyPost, createBookmarkApiV1BookmarksCreatePost, deleteBookmarkForUserApiV1BookmarksDeleteDelete, deleteBookmarkApiV1BookmarksDeleteByIdDelete, getBookmarkForUserApiV1BookmarksGetGet, getBookmarkApiV1BookmarksGetByIdGet, listBookmarksForUserApiV1BookmarksListGet, listBookmarksApiV1BookmarksListAllGet, createCaseinfoApiV1CaseinfoCreatePost, deleteCaseinfoForUserApiV1CaseinfoDeleteDelete, deleteCaseinfoApiV1CaseinfoDeleteByIdDelete, getCaseinfoForUserApiV1CaseinfoGetGet, getCaseinfoApiV1CaseinfoGetByIdGet, listCaseinfosForUserApiV1CaseinfoListGet, listCaseinfosApiV1CaseinfoListAllGet, updateCaseinfoForUserApiV1CaseinfoUpdatePatch, updateCaseinfoForUserApiV1CaseinfoUpdatePut, updateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPut, listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet, createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPost, deleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDelete, getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGet, updateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPut, listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet, createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPost, listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet, createSubmittingorgApiV1ClinvarsubSubmittingorgsPost, deleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDelete, getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGet, updateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPut, usersCurrentUserApiV1UsersMeGet, usersPatchCurrentUserApiV1UsersMePatch, usersDeleteUserApiV1UsersIdDelete, usersUserApiV1UsersIdGet, usersPatchUserApiV1UsersIdPatch, testEmailApiV1UtilsTestEmailPost, dataVersionsInternalDataVersionsGet, dataVersionsInternalDataVersionsPost, frontendSettingsInternalFrontendSettingsGet, frontendSettingsInternalFrontendSettingsPost, reverseProxyInternalProxyPathGet, reverseProxyInternalProxyPathPost, acmgInternalRemoteAcmgPathGet, cnvAcmgInternalRemoteCnvAcmgPathGet, pubtator3ApiInternalRemotePubtator3ApiPathGet, variantvalidatorInternalRemoteVariantvalidatorPathGet, versionInternalVersionGet, versionInternalVersionPost } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const createAcmgseqvarApiV1AcmgseqvarCreatePostQueryKey = (options: Options<CreateAcmgseqvarApiV1AcmgseqvarCreatePostData>) => [
    createQueryKey("createAcmgseqvarApiV1AcmgseqvarCreatePost", options)
];

export const createAcmgseqvarApiV1AcmgseqvarCreatePostOptions = (options: Options<CreateAcmgseqvarApiV1AcmgseqvarCreatePostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createAcmgseqvarApiV1AcmgseqvarCreatePost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createAcmgseqvarApiV1AcmgseqvarCreatePostQueryKey(options)
}); };

export const createAcmgseqvarApiV1AcmgseqvarCreatePostMutation = () => { const mutationOptions: UseMutationOptions<CreateAcmgseqvarApiV1AcmgseqvarCreatePostResponse, CreateAcmgseqvarApiV1AcmgseqvarCreatePostError, Options<CreateAcmgseqvarApiV1AcmgseqvarCreatePostData>> = {
    mutationFn: async (options) => {
        const { data } = await createAcmgseqvarApiV1AcmgseqvarCreatePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteResponse, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteError, Options<DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteResponse, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteError, Options<DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getAcmgseqvarByUserApiV1AcmgseqvarGetGetQueryKey = (options: Options<GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData>) => [
    createQueryKey("getAcmgseqvarByUserApiV1AcmgseqvarGetGet", options)
];

export const getAcmgseqvarByUserApiV1AcmgseqvarGetGetOptions = (options: Options<GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getAcmgseqvarByUserApiV1AcmgseqvarGetGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getAcmgseqvarByUserApiV1AcmgseqvarGetGetQueryKey(options)
}); };

export const getAcmgseqvarApiV1AcmgseqvarGetByIdGetQueryKey = (options: Options<GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData>) => [
    createQueryKey("getAcmgseqvarApiV1AcmgseqvarGetByIdGet", options)
];

export const getAcmgseqvarApiV1AcmgseqvarGetByIdGetOptions = (options: Options<GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getAcmgseqvarApiV1AcmgseqvarGetByIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getAcmgseqvarApiV1AcmgseqvarGetByIdGetQueryKey(options)
}); };

export const listAcmgseqvarsByUserApiV1AcmgseqvarListGetQueryKey = (options?: Options<ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData>) => [
    createQueryKey("listAcmgseqvarsByUserApiV1AcmgseqvarListGet", options)
];

export const listAcmgseqvarsByUserApiV1AcmgseqvarListGetOptions = (options?: Options<ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listAcmgseqvarsByUserApiV1AcmgseqvarListGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listAcmgseqvarsByUserApiV1AcmgseqvarListGetQueryKey(options)
}); };

export const listAcmgseqvarsApiV1AcmgseqvarListAllGetQueryKey = (options?: Options<ListAcmgseqvarsApiV1AcmgseqvarListAllGetData>) => [
    createQueryKey("listAcmgseqvarsApiV1AcmgseqvarListAllGet", options)
];

export const listAcmgseqvarsApiV1AcmgseqvarListAllGetOptions = (options?: Options<ListAcmgseqvarsApiV1AcmgseqvarListAllGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listAcmgseqvarsApiV1AcmgseqvarListAllGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listAcmgseqvarsApiV1AcmgseqvarListAllGetQueryKey(options)
}); };

export const updateAcmgseqvarApiV1AcmgseqvarUpdatePatchMutation = () => { const mutationOptions: UseMutationOptions<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchError, Options<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchData>> = {
    mutationFn: async (options) => {
        const { data } = await updateAcmgseqvarApiV1AcmgseqvarUpdatePatch({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updateAcmgseqvarApiV1AcmgseqvarUpdatePutMutation = () => { const mutationOptions: UseMutationOptions<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutError, Options<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutData>> = {
    mutationFn: async (options) => {
        const { data } = await updateAcmgseqvarApiV1AcmgseqvarUpdatePut({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const readAdminmsgsApiV1AdminmsgsGetQueryKey = (options?: Options<ReadAdminmsgsApiV1AdminmsgsGetData>) => [
    createQueryKey("readAdminmsgsApiV1AdminmsgsGet", options)
];

export const readAdminmsgsApiV1AdminmsgsGetOptions = (options?: Options<ReadAdminmsgsApiV1AdminmsgsGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await readAdminmsgsApiV1AdminmsgsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: readAdminmsgsApiV1AdminmsgsGetQueryKey(options)
}); };

export const authBearerLoginApiV1AuthBearerLoginPostQueryKey = (options: Options<AuthBearerLoginApiV1AuthBearerLoginPostData>) => [
    createQueryKey("authBearerLoginApiV1AuthBearerLoginPost", options)
];

export const authBearerLoginApiV1AuthBearerLoginPostOptions = (options: Options<AuthBearerLoginApiV1AuthBearerLoginPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await authBearerLoginApiV1AuthBearerLoginPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: authBearerLoginApiV1AuthBearerLoginPostQueryKey(options)
}); };

export const authBearerLoginApiV1AuthBearerLoginPostMutation = () => { const mutationOptions: UseMutationOptions<AuthBearerLoginApiV1AuthBearerLoginPostResponse, AuthBearerLoginApiV1AuthBearerLoginPostError, Options<AuthBearerLoginApiV1AuthBearerLoginPostData>> = {
    mutationFn: async (options) => {
        const { data } = await authBearerLoginApiV1AuthBearerLoginPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const authBearerLogoutApiV1AuthBearerLogoutPostQueryKey = (options?: Options) => [
    createQueryKey("authBearerLogoutApiV1AuthBearerLogoutPost", options)
];

export const authBearerLogoutApiV1AuthBearerLogoutPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await authBearerLogoutApiV1AuthBearerLogoutPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: authBearerLogoutApiV1AuthBearerLogoutPostQueryKey(options)
}); };

export const authBearerLogoutApiV1AuthBearerLogoutPostMutation = () => { const mutationOptions: UseMutationOptions<AuthBearerLogoutApiV1AuthBearerLogoutPostResponse, AuthBearerLogoutApiV1AuthBearerLogoutPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await authBearerLogoutApiV1AuthBearerLogoutPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const authCookieLoginApiV1AuthCookieLoginPostQueryKey = (options: Options<AuthCookieLoginApiV1AuthCookieLoginPostData>) => [
    createQueryKey("authCookieLoginApiV1AuthCookieLoginPost", options)
];

export const authCookieLoginApiV1AuthCookieLoginPostOptions = (options: Options<AuthCookieLoginApiV1AuthCookieLoginPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await authCookieLoginApiV1AuthCookieLoginPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: authCookieLoginApiV1AuthCookieLoginPostQueryKey(options)
}); };

export const authCookieLoginApiV1AuthCookieLoginPostMutation = () => { const mutationOptions: UseMutationOptions<AuthCookieLoginApiV1AuthCookieLoginPostResponse, AuthCookieLoginApiV1AuthCookieLoginPostError, Options<AuthCookieLoginApiV1AuthCookieLoginPostData>> = {
    mutationFn: async (options) => {
        const { data } = await authCookieLoginApiV1AuthCookieLoginPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const authCookieLogoutApiV1AuthCookieLogoutPostQueryKey = (options?: Options) => [
    createQueryKey("authCookieLogoutApiV1AuthCookieLogoutPost", options)
];

export const authCookieLogoutApiV1AuthCookieLogoutPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await authCookieLogoutApiV1AuthCookieLogoutPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: authCookieLogoutApiV1AuthCookieLogoutPostQueryKey(options)
}); };

export const authCookieLogoutApiV1AuthCookieLogoutPostMutation = () => { const mutationOptions: UseMutationOptions<AuthCookieLogoutApiV1AuthCookieLogoutPostResponse, AuthCookieLogoutApiV1AuthCookieLogoutPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await authCookieLogoutApiV1AuthCookieLogoutPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const listOauth2ProvidersApiV1AuthOauth2ProvidersGetQueryKey = (options?: Options) => [
    createQueryKey("listOauth2ProvidersApiV1AuthOauth2ProvidersGet", options)
];

export const listOauth2ProvidersApiV1AuthOauth2ProvidersGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listOauth2ProvidersApiV1AuthOauth2ProvidersGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listOauth2ProvidersApiV1AuthOauth2ProvidersGetQueryKey(options)
}); };

export const verifyRequestTokenApiV1AuthRequestVerifyTokenPostQueryKey = (options: Options<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData>) => [
    createQueryKey("verifyRequestTokenApiV1AuthRequestVerifyTokenPost", options)
];

export const verifyRequestTokenApiV1AuthRequestVerifyTokenPostOptions = (options: Options<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await verifyRequestTokenApiV1AuthRequestVerifyTokenPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: verifyRequestTokenApiV1AuthRequestVerifyTokenPostQueryKey(options)
}); };

export const verifyRequestTokenApiV1AuthRequestVerifyTokenPostMutation = () => { const mutationOptions: UseMutationOptions<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostError, Options<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData>> = {
    mutationFn: async (options) => {
        const { data } = await verifyRequestTokenApiV1AuthRequestVerifyTokenPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const verifyVerifyApiV1AuthVerifyPostQueryKey = (options: Options<VerifyVerifyApiV1AuthVerifyPostData>) => [
    createQueryKey("verifyVerifyApiV1AuthVerifyPost", options)
];

export const verifyVerifyApiV1AuthVerifyPostOptions = (options: Options<VerifyVerifyApiV1AuthVerifyPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await verifyVerifyApiV1AuthVerifyPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: verifyVerifyApiV1AuthVerifyPostQueryKey(options)
}); };

export const verifyVerifyApiV1AuthVerifyPostMutation = () => { const mutationOptions: UseMutationOptions<VerifyVerifyApiV1AuthVerifyPostResponse, VerifyVerifyApiV1AuthVerifyPostError, Options<VerifyVerifyApiV1AuthVerifyPostData>> = {
    mutationFn: async (options) => {
        const { data } = await verifyVerifyApiV1AuthVerifyPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const createBookmarkApiV1BookmarksCreatePostQueryKey = (options: Options<CreateBookmarkApiV1BookmarksCreatePostData>) => [
    createQueryKey("createBookmarkApiV1BookmarksCreatePost", options)
];

export const createBookmarkApiV1BookmarksCreatePostOptions = (options: Options<CreateBookmarkApiV1BookmarksCreatePostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createBookmarkApiV1BookmarksCreatePost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createBookmarkApiV1BookmarksCreatePostQueryKey(options)
}); };

export const createBookmarkApiV1BookmarksCreatePostMutation = () => { const mutationOptions: UseMutationOptions<CreateBookmarkApiV1BookmarksCreatePostResponse, CreateBookmarkApiV1BookmarksCreatePostError, Options<CreateBookmarkApiV1BookmarksCreatePostData>> = {
    mutationFn: async (options) => {
        const { data } = await createBookmarkApiV1BookmarksCreatePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteBookmarkForUserApiV1BookmarksDeleteDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteBookmarkForUserApiV1BookmarksDeleteDeleteResponse, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteError, Options<DeleteBookmarkForUserApiV1BookmarksDeleteDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteBookmarkForUserApiV1BookmarksDeleteDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteBookmarkApiV1BookmarksDeleteByIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteBookmarkApiV1BookmarksDeleteByIdDeleteResponse, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteError, Options<DeleteBookmarkApiV1BookmarksDeleteByIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteBookmarkApiV1BookmarksDeleteByIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getBookmarkForUserApiV1BookmarksGetGetQueryKey = (options: Options<GetBookmarkForUserApiV1BookmarksGetGetData>) => [
    createQueryKey("getBookmarkForUserApiV1BookmarksGetGet", options)
];

export const getBookmarkForUserApiV1BookmarksGetGetOptions = (options: Options<GetBookmarkForUserApiV1BookmarksGetGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getBookmarkForUserApiV1BookmarksGetGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getBookmarkForUserApiV1BookmarksGetGetQueryKey(options)
}); };

export const getBookmarkApiV1BookmarksGetByIdGetQueryKey = (options: Options<GetBookmarkApiV1BookmarksGetByIdGetData>) => [
    createQueryKey("getBookmarkApiV1BookmarksGetByIdGet", options)
];

export const getBookmarkApiV1BookmarksGetByIdGetOptions = (options: Options<GetBookmarkApiV1BookmarksGetByIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getBookmarkApiV1BookmarksGetByIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getBookmarkApiV1BookmarksGetByIdGetQueryKey(options)
}); };

export const listBookmarksForUserApiV1BookmarksListGetQueryKey = (options?: Options<ListBookmarksForUserApiV1BookmarksListGetData>) => [
    createQueryKey("listBookmarksForUserApiV1BookmarksListGet", options)
];

export const listBookmarksForUserApiV1BookmarksListGetOptions = (options?: Options<ListBookmarksForUserApiV1BookmarksListGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listBookmarksForUserApiV1BookmarksListGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listBookmarksForUserApiV1BookmarksListGetQueryKey(options)
}); };

export const listBookmarksApiV1BookmarksListAllGetQueryKey = (options?: Options<ListBookmarksApiV1BookmarksListAllGetData>) => [
    createQueryKey("listBookmarksApiV1BookmarksListAllGet", options)
];

export const listBookmarksApiV1BookmarksListAllGetOptions = (options?: Options<ListBookmarksApiV1BookmarksListAllGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listBookmarksApiV1BookmarksListAllGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listBookmarksApiV1BookmarksListAllGetQueryKey(options)
}); };

export const createCaseinfoApiV1CaseinfoCreatePostQueryKey = (options: Options<CreateCaseinfoApiV1CaseinfoCreatePostData>) => [
    createQueryKey("createCaseinfoApiV1CaseinfoCreatePost", options)
];

export const createCaseinfoApiV1CaseinfoCreatePostOptions = (options: Options<CreateCaseinfoApiV1CaseinfoCreatePostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createCaseinfoApiV1CaseinfoCreatePost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createCaseinfoApiV1CaseinfoCreatePostQueryKey(options)
}); };

export const createCaseinfoApiV1CaseinfoCreatePostMutation = () => { const mutationOptions: UseMutationOptions<CreateCaseinfoApiV1CaseinfoCreatePostResponse, CreateCaseinfoApiV1CaseinfoCreatePostError, Options<CreateCaseinfoApiV1CaseinfoCreatePostData>> = {
    mutationFn: async (options) => {
        const { data } = await createCaseinfoApiV1CaseinfoCreatePost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteCaseinfoForUserApiV1CaseinfoDeleteDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteResponse, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteError, Options<DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteCaseinfoForUserApiV1CaseinfoDeleteDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteCaseinfoApiV1CaseinfoDeleteByIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteResponse, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteError, Options<DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteCaseinfoApiV1CaseinfoDeleteByIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getCaseinfoForUserApiV1CaseinfoGetGetQueryKey = (options?: Options<GetCaseinfoForUserApiV1CaseinfoGetGetData>) => [
    createQueryKey("getCaseinfoForUserApiV1CaseinfoGetGet", options)
];

export const getCaseinfoForUserApiV1CaseinfoGetGetOptions = (options?: Options<GetCaseinfoForUserApiV1CaseinfoGetGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCaseinfoForUserApiV1CaseinfoGetGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getCaseinfoForUserApiV1CaseinfoGetGetQueryKey(options)
}); };

export const getCaseinfoApiV1CaseinfoGetByIdGetQueryKey = (options: Options<GetCaseinfoApiV1CaseinfoGetByIdGetData>) => [
    createQueryKey("getCaseinfoApiV1CaseinfoGetByIdGet", options)
];

export const getCaseinfoApiV1CaseinfoGetByIdGetOptions = (options: Options<GetCaseinfoApiV1CaseinfoGetByIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getCaseinfoApiV1CaseinfoGetByIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getCaseinfoApiV1CaseinfoGetByIdGetQueryKey(options)
}); };

export const listCaseinfosForUserApiV1CaseinfoListGetQueryKey = (options?: Options) => [
    createQueryKey("listCaseinfosForUserApiV1CaseinfoListGet", options)
];

export const listCaseinfosForUserApiV1CaseinfoListGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listCaseinfosForUserApiV1CaseinfoListGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listCaseinfosForUserApiV1CaseinfoListGetQueryKey(options)
}); };

export const listCaseinfosApiV1CaseinfoListAllGetQueryKey = (options?: Options<ListCaseinfosApiV1CaseinfoListAllGetData>) => [
    createQueryKey("listCaseinfosApiV1CaseinfoListAllGet", options)
];

export const listCaseinfosApiV1CaseinfoListAllGetOptions = (options?: Options<ListCaseinfosApiV1CaseinfoListAllGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listCaseinfosApiV1CaseinfoListAllGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listCaseinfosApiV1CaseinfoListAllGetQueryKey(options)
}); };

export const updateCaseinfoForUserApiV1CaseinfoUpdatePatchMutation = () => { const mutationOptions: UseMutationOptions<UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchError, Options<UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchData>> = {
    mutationFn: async (options) => {
        const { data } = await updateCaseinfoForUserApiV1CaseinfoUpdatePatch({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updateCaseinfoForUserApiV1CaseinfoUpdatePutMutation = () => { const mutationOptions: UseMutationOptions<UpdateCaseinfoForUserApiV1CaseinfoUpdatePutResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutError, Options<UpdateCaseinfoForUserApiV1CaseinfoUpdatePutData>> = {
    mutationFn: async (options) => {
        const { data } = await updateCaseinfoForUserApiV1CaseinfoUpdatePut({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const updateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutMutation = () => { const mutationOptions: UseMutationOptions<UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutResponse, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutError, Options<UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutData>> = {
    mutationFn: async (options) => {
        const { data } = await updateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPut({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetQueryKey = (options?: Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>) => [
    createQueryKey("listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet", options)
];

export const listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetOptions = (options?: Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetQueryKey(options)
}); };

export const listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetInfiniteQueryKey = (options?: Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>): QueryKey<Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>> => [
    createQueryKey("listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet", options, true)
];

// Important: the type annotation (:any) is required to avoid a TypeScript error.
export const listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetInfiniteOptions: any = (options?: Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>) => { return infiniteQueryOptions<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetError, InfiniteData<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse>, QueryKey<Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>>, unknown | Pick<QueryKey<Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                cursor: pageParam
            }
        };
        const { data } = await listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetInfiniteQueryKey(options)
}); };

export const createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostQueryKey = (options: Options<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData>) => [
    createQueryKey("createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPost", options)
];

export const createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostOptions = (options: Options<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostQueryKey(options)
}); };

export const createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostMutation = () => { const mutationOptions: UseMutationOptions<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostResponse, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostError, Options<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData>> = {
    mutationFn: async (options) => {
        const { data } = await createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteResponse, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteError, Options<DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetQueryKey = (options: Options<GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData>) => [
    createQueryKey("getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGet", options)
];

export const getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetOptions = (options: Options<GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetQueryKey(options)
}); };

export const updateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutMutation = () => { const mutationOptions: UseMutationOptions<UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutResponse, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutError, Options<UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutData>> = {
    mutationFn: async (options) => {
        const { data } = await updateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPut({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetQueryKey = (options: Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>) => [
    createQueryKey("listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet", options)
];

export const listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetOptions = (options: Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetQueryKey(options)
}); };

export const listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetInfiniteQueryKey = (options: Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>): QueryKey<Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>> => [
    createQueryKey("listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet", options, true)
];

// Important: the type annotation (:any) is required to avoid a TypeScript error.
export const listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetInfiniteOptions: any = (options: Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>) => { return infiniteQueryOptions<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetError, InfiniteData<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse>, QueryKey<Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>>, unknown | Pick<QueryKey<Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                cursor: pageParam
            }
        };
        const { data } = await listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetInfiniteQueryKey(options)
}); };

export const createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostQueryKey = (options: Options<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData>) => [
    createQueryKey("createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPost", options)
];

export const createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostOptions = (options: Options<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostQueryKey(options)
}); };

export const createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostMutation = () => { const mutationOptions: UseMutationOptions<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostResponse, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostError, Options<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData>> = {
    mutationFn: async (options) => {
        const { data } = await createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetQueryKey = (options?: Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>) => [
    createQueryKey("listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet", options)
];

export const listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetOptions = (options?: Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetQueryKey(options)
}); };

export const listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetInfiniteQueryKey = (options?: Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>): QueryKey<Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>> => [
    createQueryKey("listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet", options, true)
];

// Important: the type annotation (:any) is required to avoid a TypeScript error.
export const listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetInfiniteOptions: any = (options?: Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>) => { return infiniteQueryOptions<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetError, InfiniteData<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse>, QueryKey<Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>>, unknown | Pick<QueryKey<Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
// @ts-ignore
{
    queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === "object" ? pageParam : {
            query: {
                cursor: pageParam
            }
        };
        const { data } = await listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet({
            ...options,
            ...queryKey[0],
            body: {
                ...queryKey[0].body as any,
                ...page.body as any
            },
            headers: {
                ...queryKey[0].headers,
                ...page.headers
            },
            path: {
                ...queryKey[0].path,
                ...page.path
            },
            query: {
                ...queryKey[0].query,
                ...page.query
            },
            throwOnError: true
        });
        return data;
    },
    queryKey: listSubmittingorgsApiV1ClinvarsubSubmittingorgsGetInfiniteQueryKey(options)
}); };

export const createSubmittingorgApiV1ClinvarsubSubmittingorgsPostQueryKey = (options: Options<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData>) => [
    createQueryKey("createSubmittingorgApiV1ClinvarsubSubmittingorgsPost", options)
];

export const createSubmittingorgApiV1ClinvarsubSubmittingorgsPostOptions = (options: Options<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await createSubmittingorgApiV1ClinvarsubSubmittingorgsPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: createSubmittingorgApiV1ClinvarsubSubmittingorgsPostQueryKey(options)
}); };

export const createSubmittingorgApiV1ClinvarsubSubmittingorgsPostMutation = () => { const mutationOptions: UseMutationOptions<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostResponse, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostError, Options<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData>> = {
    mutationFn: async (options) => {
        const { data } = await createSubmittingorgApiV1ClinvarsubSubmittingorgsPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const deleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteResponse, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteError, Options<DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await deleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetQueryKey = (options: Options<GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData>) => [
    createQueryKey("getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGet", options)
];

export const getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetOptions = (options: Options<GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetQueryKey(options)
}); };

export const updateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutMutation = () => { const mutationOptions: UseMutationOptions<UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutResponse, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutError, Options<UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutData>> = {
    mutationFn: async (options) => {
        const { data } = await updateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPut({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const usersCurrentUserApiV1UsersMeGetQueryKey = (options?: Options) => [
    createQueryKey("usersCurrentUserApiV1UsersMeGet", options)
];

export const usersCurrentUserApiV1UsersMeGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await usersCurrentUserApiV1UsersMeGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: usersCurrentUserApiV1UsersMeGetQueryKey(options)
}); };

export const usersPatchCurrentUserApiV1UsersMePatchMutation = () => { const mutationOptions: UseMutationOptions<UsersPatchCurrentUserApiV1UsersMePatchResponse, UsersPatchCurrentUserApiV1UsersMePatchError, Options<UsersPatchCurrentUserApiV1UsersMePatchData>> = {
    mutationFn: async (options) => {
        const { data } = await usersPatchCurrentUserApiV1UsersMePatch({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const usersDeleteUserApiV1UsersIdDeleteMutation = () => { const mutationOptions: UseMutationOptions<UsersDeleteUserApiV1UsersIdDeleteResponse, UsersDeleteUserApiV1UsersIdDeleteError, Options<UsersDeleteUserApiV1UsersIdDeleteData>> = {
    mutationFn: async (options) => {
        const { data } = await usersDeleteUserApiV1UsersIdDelete({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const usersUserApiV1UsersIdGetQueryKey = (options: Options<UsersUserApiV1UsersIdGetData>) => [
    createQueryKey("usersUserApiV1UsersIdGet", options)
];

export const usersUserApiV1UsersIdGetOptions = (options: Options<UsersUserApiV1UsersIdGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await usersUserApiV1UsersIdGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: usersUserApiV1UsersIdGetQueryKey(options)
}); };

export const usersPatchUserApiV1UsersIdPatchMutation = () => { const mutationOptions: UseMutationOptions<UsersPatchUserApiV1UsersIdPatchResponse, UsersPatchUserApiV1UsersIdPatchError, Options<UsersPatchUserApiV1UsersIdPatchData>> = {
    mutationFn: async (options) => {
        const { data } = await usersPatchUserApiV1UsersIdPatch({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const testEmailApiV1UtilsTestEmailPostQueryKey = (options: Options<TestEmailApiV1UtilsTestEmailPostData>) => [
    createQueryKey("testEmailApiV1UtilsTestEmailPost", options)
];

export const testEmailApiV1UtilsTestEmailPostOptions = (options: Options<TestEmailApiV1UtilsTestEmailPostData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await testEmailApiV1UtilsTestEmailPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: testEmailApiV1UtilsTestEmailPostQueryKey(options)
}); };

export const testEmailApiV1UtilsTestEmailPostMutation = () => { const mutationOptions: UseMutationOptions<TestEmailApiV1UtilsTestEmailPostResponse, TestEmailApiV1UtilsTestEmailPostError, Options<TestEmailApiV1UtilsTestEmailPostData>> = {
    mutationFn: async (options) => {
        const { data } = await testEmailApiV1UtilsTestEmailPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const dataVersionsInternalDataVersionsGetQueryKey = (options?: Options) => [
    createQueryKey("dataVersionsInternalDataVersionsGet", options)
];

export const dataVersionsInternalDataVersionsGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dataVersionsInternalDataVersionsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: dataVersionsInternalDataVersionsGetQueryKey(options)
}); };

export const dataVersionsInternalDataVersionsPostQueryKey = (options?: Options) => [
    createQueryKey("dataVersionsInternalDataVersionsPost", options)
];

export const dataVersionsInternalDataVersionsPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await dataVersionsInternalDataVersionsPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: dataVersionsInternalDataVersionsPostQueryKey(options)
}); };

export const dataVersionsInternalDataVersionsPostMutation = () => { const mutationOptions: UseMutationOptions<DataVersionsInternalDataVersionsPostResponse, DataVersionsInternalDataVersionsPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await dataVersionsInternalDataVersionsPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const frontendSettingsInternalFrontendSettingsGetQueryKey = (options?: Options) => [
    createQueryKey("frontendSettingsInternalFrontendSettingsGet", options)
];

export const frontendSettingsInternalFrontendSettingsGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await frontendSettingsInternalFrontendSettingsGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: frontendSettingsInternalFrontendSettingsGetQueryKey(options)
}); };

export const frontendSettingsInternalFrontendSettingsPostQueryKey = (options?: Options) => [
    createQueryKey("frontendSettingsInternalFrontendSettingsPost", options)
];

export const frontendSettingsInternalFrontendSettingsPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await frontendSettingsInternalFrontendSettingsPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: frontendSettingsInternalFrontendSettingsPostQueryKey(options)
}); };

export const frontendSettingsInternalFrontendSettingsPostMutation = () => { const mutationOptions: UseMutationOptions<FrontendSettingsInternalFrontendSettingsPostResponse, FrontendSettingsInternalFrontendSettingsPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await frontendSettingsInternalFrontendSettingsPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const reverseProxyInternalProxyPathGetQueryKey = (options?: Options) => [
    createQueryKey("reverseProxyInternalProxyPathGet", options)
];

export const reverseProxyInternalProxyPathGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await reverseProxyInternalProxyPathGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: reverseProxyInternalProxyPathGetQueryKey(options)
}); };

export const reverseProxyInternalProxyPathPostQueryKey = (options?: Options) => [
    createQueryKey("reverseProxyInternalProxyPathPost", options)
];

export const reverseProxyInternalProxyPathPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await reverseProxyInternalProxyPathPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: reverseProxyInternalProxyPathPostQueryKey(options)
}); };

export const reverseProxyInternalProxyPathPostMutation = () => { const mutationOptions: UseMutationOptions<ReverseProxyInternalProxyPathPostResponse, ReverseProxyInternalProxyPathPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await reverseProxyInternalProxyPathPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const acmgInternalRemoteAcmgPathGetQueryKey = (options?: Options) => [
    createQueryKey("acmgInternalRemoteAcmgPathGet", options)
];

export const acmgInternalRemoteAcmgPathGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await acmgInternalRemoteAcmgPathGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: acmgInternalRemoteAcmgPathGetQueryKey(options)
}); };

export const cnvAcmgInternalRemoteCnvAcmgPathGetQueryKey = (options?: Options) => [
    createQueryKey("cnvAcmgInternalRemoteCnvAcmgPathGet", options)
];

export const cnvAcmgInternalRemoteCnvAcmgPathGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await cnvAcmgInternalRemoteCnvAcmgPathGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: cnvAcmgInternalRemoteCnvAcmgPathGetQueryKey(options)
}); };

export const pubtator3ApiInternalRemotePubtator3ApiPathGetQueryKey = (options: Options<Pubtator3ApiInternalRemotePubtator3ApiPathGetData>) => [
    createQueryKey("pubtator3ApiInternalRemotePubtator3ApiPathGet", options)
];

export const pubtator3ApiInternalRemotePubtator3ApiPathGetOptions = (options: Options<Pubtator3ApiInternalRemotePubtator3ApiPathGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await pubtator3ApiInternalRemotePubtator3ApiPathGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: pubtator3ApiInternalRemotePubtator3ApiPathGetQueryKey(options)
}); };

export const variantvalidatorInternalRemoteVariantvalidatorPathGetQueryKey = (options: Options<VariantvalidatorInternalRemoteVariantvalidatorPathGetData>) => [
    createQueryKey("variantvalidatorInternalRemoteVariantvalidatorPathGet", options)
];

export const variantvalidatorInternalRemoteVariantvalidatorPathGetOptions = (options: Options<VariantvalidatorInternalRemoteVariantvalidatorPathGetData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await variantvalidatorInternalRemoteVariantvalidatorPathGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: variantvalidatorInternalRemoteVariantvalidatorPathGetQueryKey(options)
}); };

export const versionInternalVersionGetQueryKey = (options?: Options) => [
    createQueryKey("versionInternalVersionGet", options)
];

export const versionInternalVersionGetOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await versionInternalVersionGet({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: versionInternalVersionGetQueryKey(options)
}); };

export const versionInternalVersionPostQueryKey = (options?: Options) => [
    createQueryKey("versionInternalVersionPost", options)
];

export const versionInternalVersionPostOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await versionInternalVersionPost({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: versionInternalVersionPostQueryKey(options)
}); };

export const versionInternalVersionPostMutation = () => { const mutationOptions: UseMutationOptions<VersionInternalVersionPostResponse, VersionInternalVersionPostError, Options> = {
    mutationFn: async (options) => {
        const { data } = await versionInternalVersionPost({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };
