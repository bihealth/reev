// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { CreateAcmgseqvarApiV1AcmgseqvarCreatePostData, CreateAcmgseqvarApiV1AcmgseqvarCreatePostError, CreateAcmgseqvarApiV1AcmgseqvarCreatePostResponse, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteData, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteError, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteResponse, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteData, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteError, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteResponse, GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData, GetAcmgseqvarByUserApiV1AcmgseqvarGetGetError, GetAcmgseqvarByUserApiV1AcmgseqvarGetGetResponse, GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData, GetAcmgseqvarApiV1AcmgseqvarGetByIdGetError, GetAcmgseqvarApiV1AcmgseqvarGetByIdGetResponse, ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData, ListAcmgseqvarsByUserApiV1AcmgseqvarListGetError, ListAcmgseqvarsByUserApiV1AcmgseqvarListGetResponse, ListAcmgseqvarsApiV1AcmgseqvarListAllGetData, ListAcmgseqvarsApiV1AcmgseqvarListAllGetError, ListAcmgseqvarsApiV1AcmgseqvarListAllGetResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchData, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchError, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutData, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutError, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutResponse, ReadAdminmsgsApiV1AdminmsgsGetData, ReadAdminmsgsApiV1AdminmsgsGetError, ReadAdminmsgsApiV1AdminmsgsGetResponse, AuthBearerLoginApiV1AuthBearerLoginPostData, AuthBearerLoginApiV1AuthBearerLoginPostError, AuthBearerLoginApiV1AuthBearerLoginPostResponse, AuthBearerLogoutApiV1AuthBearerLogoutPostError, AuthBearerLogoutApiV1AuthBearerLogoutPostResponse, AuthCookieLoginApiV1AuthCookieLoginPostData, AuthCookieLoginApiV1AuthCookieLoginPostError, AuthCookieLoginApiV1AuthCookieLoginPostResponse, AuthCookieLogoutApiV1AuthCookieLogoutPostError, AuthCookieLogoutApiV1AuthCookieLogoutPostResponse, ListOauth2ProvidersApiV1AuthOauth2ProvidersGetError, ListOauth2ProvidersApiV1AuthOauth2ProvidersGetResponse, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostError, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse, VerifyVerifyApiV1AuthVerifyPostData, VerifyVerifyApiV1AuthVerifyPostError, VerifyVerifyApiV1AuthVerifyPostResponse, CreateBookmarkApiV1BookmarksCreatePostData, CreateBookmarkApiV1BookmarksCreatePostError, CreateBookmarkApiV1BookmarksCreatePostResponse, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteData, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteError, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteResponse, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteData, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteError, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteResponse, GetBookmarkForUserApiV1BookmarksGetGetData, GetBookmarkForUserApiV1BookmarksGetGetError, GetBookmarkForUserApiV1BookmarksGetGetResponse, GetBookmarkApiV1BookmarksGetByIdGetData, GetBookmarkApiV1BookmarksGetByIdGetError, GetBookmarkApiV1BookmarksGetByIdGetResponse, ListBookmarksForUserApiV1BookmarksListGetData, ListBookmarksForUserApiV1BookmarksListGetError, ListBookmarksForUserApiV1BookmarksListGetResponse, ListBookmarksApiV1BookmarksListAllGetData, ListBookmarksApiV1BookmarksListAllGetError, ListBookmarksApiV1BookmarksListAllGetResponse, CreateCaseinfoApiV1CaseinfoCreatePostData, CreateCaseinfoApiV1CaseinfoCreatePostError, CreateCaseinfoApiV1CaseinfoCreatePostResponse, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteData, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteError, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteResponse, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteData, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteError, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteResponse, GetCaseinfoForUserApiV1CaseinfoGetGetData, GetCaseinfoForUserApiV1CaseinfoGetGetError, GetCaseinfoForUserApiV1CaseinfoGetGetResponse, GetCaseinfoApiV1CaseinfoGetByIdGetData, GetCaseinfoApiV1CaseinfoGetByIdGetError, GetCaseinfoApiV1CaseinfoGetByIdGetResponse, ListCaseinfosForUserApiV1CaseinfoListGetError, ListCaseinfosForUserApiV1CaseinfoListGetResponse, ListCaseinfosApiV1CaseinfoListAllGetData, ListCaseinfosApiV1CaseinfoListAllGetError, ListCaseinfosApiV1CaseinfoListAllGetResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchData, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchError, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutData, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutError, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutResponse, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutData, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutError, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutResponse, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetError, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostError, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostResponse, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteData, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteError, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteResponse, GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData, GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetError, GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetResponse, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutData, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutError, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutResponse, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetError, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostError, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostResponse, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetError, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostError, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostResponse, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteData, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteError, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteResponse, GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData, GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetError, GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetResponse, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutData, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutError, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutResponse, UsersCurrentUserApiV1UsersMeGetError, UsersCurrentUserApiV1UsersMeGetResponse, UsersPatchCurrentUserApiV1UsersMePatchData, UsersPatchCurrentUserApiV1UsersMePatchError, UsersPatchCurrentUserApiV1UsersMePatchResponse, UsersDeleteUserApiV1UsersIdDeleteData, UsersDeleteUserApiV1UsersIdDeleteError, UsersDeleteUserApiV1UsersIdDeleteResponse, UsersUserApiV1UsersIdGetData, UsersUserApiV1UsersIdGetError, UsersUserApiV1UsersIdGetResponse, UsersPatchUserApiV1UsersIdPatchData, UsersPatchUserApiV1UsersIdPatchError, UsersPatchUserApiV1UsersIdPatchResponse, TestEmailApiV1UtilsTestEmailPostData, TestEmailApiV1UtilsTestEmailPostError, TestEmailApiV1UtilsTestEmailPostResponse, DataVersionsInternalDataVersionsGetError, DataVersionsInternalDataVersionsGetResponse, DataVersionsInternalDataVersionsPostError, DataVersionsInternalDataVersionsPostResponse, FrontendSettingsInternalFrontendSettingsGetError, FrontendSettingsInternalFrontendSettingsGetResponse, FrontendSettingsInternalFrontendSettingsPostError, FrontendSettingsInternalFrontendSettingsPostResponse, ReverseProxyInternalProxyPathGetError, ReverseProxyInternalProxyPathGetResponse, ReverseProxyInternalProxyPathPostError, ReverseProxyInternalProxyPathPostResponse, AcmgInternalRemoteAcmgPathGetError, AcmgInternalRemoteAcmgPathGetResponse, CnvAcmgInternalRemoteCnvAcmgPathGetError, CnvAcmgInternalRemoteCnvAcmgPathGetResponse, Pubtator3ApiInternalRemotePubtator3ApiPathGetData, Pubtator3ApiInternalRemotePubtator3ApiPathGetError, Pubtator3ApiInternalRemotePubtator3ApiPathGetResponse, VariantvalidatorInternalRemoteVariantvalidatorPathGetData, VariantvalidatorInternalRemoteVariantvalidatorPathGetError, VariantvalidatorInternalRemoteVariantvalidatorPathGetResponse, VersionInternalVersionGetError, VersionInternalVersionGetResponse, VersionInternalVersionPostError, VersionInternalVersionPostResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create Acmgseqvar
 * Create a new ACMG Sequence Variant.
 *
 * :param acmgseqvar: ACMG Sequence Variant to create
 * :type acmgseqvar: dict or :class:`.schemas.AcmgSeqVarCreate`
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const createAcmgseqvarApiV1AcmgseqvarCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateAcmgseqvarApiV1AcmgseqvarCreatePostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAcmgseqvarApiV1AcmgseqvarCreatePostResponse, CreateAcmgseqvarApiV1AcmgseqvarCreatePostError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/create'
}); };

/**
 * Delete Acmgseqvar By User
 * Delete a ACMG Sequence Variant by id.
 *
 * :param id: ACMG Sequence Variant id
 * :type id: uuid
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const deleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteResponse, DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/delete'
}); };

/**
 * Delete Acmgseqvar
 * Delete a ACMG Sequence Variant by id. Available only for superusers.
 *
 * :param id: ACMG Sequence Variant id
 * :type id: uuid
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const deleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteResponse, DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/delete-by-id'
}); };

/**
 * Get Acmgseqvar By User
 * Get a ACMG Sequence Variant by id.
 *
 * :param id: ACMG Sequence Variant id
 * :type id: uuid
 * :return: ACMG Sequence Variant
 * :rtype: dict
 * :raises HTTPException 404: ACMG Sequence Variant not found
 * :note: If user_agent is browser, return 204 Response
 */
export const getAcmgseqvarByUserApiV1AcmgseqvarGetGet = <ThrowOnError extends boolean = false>(options: Options<GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAcmgseqvarByUserApiV1AcmgseqvarGetGetResponse, GetAcmgseqvarByUserApiV1AcmgseqvarGetGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/get'
}); };

/**
 * Get Acmgseqvar
 * Get a ACMG Sequence Variant by id. Available only for superusers.
 *
 * :param id: ACMG Sequence Variant id
 * :type id: uuid
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const getAcmgseqvarApiV1AcmgseqvarGetByIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAcmgseqvarApiV1AcmgseqvarGetByIdGetResponse, GetAcmgseqvarApiV1AcmgseqvarGetByIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/get-by-id'
}); };

/**
 * List Acmgseqvars By User
 * List ACMG Sequence Variants by user.
 *
 * :return: list of ACMG Sequence Variants
 * :rtype: list
 */
export const listAcmgseqvarsByUserApiV1AcmgseqvarListGet = <ThrowOnError extends boolean = false>(options?: Options<ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListAcmgseqvarsByUserApiV1AcmgseqvarListGetResponse, ListAcmgseqvarsByUserApiV1AcmgseqvarListGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/list'
}); };

/**
 * List Acmgseqvars
 * List all ACMG Sequence Variants. Available only for superusers.
 *
 * :param skip: number of ACMG Sequence Variants to skip
 * :type skip: int
 * :param limit: maximum number of ACMG Sequence Variants to return
 * :type limit: int
 * :return: list of ACMG Sequence Variants
 * :rtype: list
 */
export const listAcmgseqvarsApiV1AcmgseqvarListAllGet = <ThrowOnError extends boolean = false>(options?: Options<ListAcmgseqvarsApiV1AcmgseqvarListAllGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListAcmgseqvarsApiV1AcmgseqvarListAllGetResponse, ListAcmgseqvarsApiV1AcmgseqvarListAllGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/list-all'
}); };

/**
 * Update Acmgseqvar
 * Update a ACMG Sequence Variant.
 *
 * :param acmgseqvar: ACMG Sequence Variant to update
 * :type acmgseqvar: dict or :class:`.schemas.AcmgSeqVarUpdate`
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const updateAcmgseqvarApiV1AcmgseqvarUpdatePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/update'
}); };

/**
 * Update Acmgseqvar
 * Update a ACMG Sequence Variant.
 *
 * :param acmgseqvar: ACMG Sequence Variant to update
 * :type acmgseqvar: dict or :class:`.schemas.AcmgSeqVarUpdate`
 * :return: ACMG Sequence Variant
 * :rtype: dict
 */
export const updateAcmgseqvarApiV1AcmgseqvarUpdatePut = <ThrowOnError extends boolean = false>(options: Options<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutResponse, UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutError, ThrowOnError>({
    ...options,
    url: '/api/v1/acmgseqvar/update'
}); };

/**
 * Read Adminmsgs
 * Retrieve all admin messages.
 *
 * :return: list of admin messages
 * :rtype: list
 */
export const readAdminmsgsApiV1AdminmsgsGet = <ThrowOnError extends boolean = false>(options?: Options<ReadAdminmsgsApiV1AdminmsgsGetData, ThrowOnError>) => { return (options?.client ?? client).get<ReadAdminmsgsApiV1AdminmsgsGetResponse, ReadAdminmsgsApiV1AdminmsgsGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/adminmsgs/'
}); };

/**
 * Auth:Bearer.Login
 */
export const authBearerLoginApiV1AuthBearerLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthBearerLoginApiV1AuthBearerLoginPostData, ThrowOnError>) => { return (options?.client ?? client).post<AuthBearerLoginApiV1AuthBearerLoginPostResponse, AuthBearerLoginApiV1AuthBearerLoginPostError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options?.headers
    },
    url: '/api/v1/auth/bearer/login'
}); };

/**
 * Auth:Bearer.Logout
 */
export const authBearerLogoutApiV1AuthBearerLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<AuthBearerLogoutApiV1AuthBearerLogoutPostResponse, AuthBearerLogoutApiV1AuthBearerLogoutPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/auth/bearer/logout'
}); };

/**
 * Auth:Cookie.Login
 */
export const authCookieLoginApiV1AuthCookieLoginPost = <ThrowOnError extends boolean = false>(options: Options<AuthCookieLoginApiV1AuthCookieLoginPostData, ThrowOnError>) => { return (options?.client ?? client).post<AuthCookieLoginApiV1AuthCookieLoginPostResponse, AuthCookieLoginApiV1AuthCookieLoginPostError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        ...options?.headers
    },
    url: '/api/v1/auth/cookie/login'
}); };

/**
 * Auth:Cookie.Logout
 */
export const authCookieLogoutApiV1AuthCookieLogoutPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<AuthCookieLogoutApiV1AuthCookieLogoutPostResponse, AuthCookieLogoutApiV1AuthCookieLogoutPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/auth/cookie/logout'
}); };

/**
 * List Oauth2 Providers
 * Retrieve all admin messages.
 *
 * :return: list of admin messages
 * :rtype: list
 */
export const listOauth2ProvidersApiV1AuthOauth2ProvidersGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListOauth2ProvidersApiV1AuthOauth2ProvidersGetResponse, ListOauth2ProvidersApiV1AuthOauth2ProvidersGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/auth/oauth2-providers'
}); };

/**
 * Verify:Request-Token
 */
export const verifyRequestTokenApiV1AuthRequestVerifyTokenPost = <ThrowOnError extends boolean = false>(options: Options<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData, ThrowOnError>) => { return (options?.client ?? client).post<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/auth/request-verify-token'
}); };

/**
 * Verify:Verify
 */
export const verifyVerifyApiV1AuthVerifyPost = <ThrowOnError extends boolean = false>(options: Options<VerifyVerifyApiV1AuthVerifyPostData, ThrowOnError>) => { return (options?.client ?? client).post<VerifyVerifyApiV1AuthVerifyPostResponse, VerifyVerifyApiV1AuthVerifyPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/auth/verify'
}); };

/**
 * Create Bookmark
 * Create a new bookmark.
 *
 * :param bookmark: bookmark to create
 * :type bookmark: dict or :class:`.schemas.BookmarkCreate`
 * :return: bookmark
 * :rtype: dict
 */
export const createBookmarkApiV1BookmarksCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateBookmarkApiV1BookmarksCreatePostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBookmarkApiV1BookmarksCreatePostResponse, CreateBookmarkApiV1BookmarksCreatePostError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/create'
}); };

/**
 * Delete Bookmark For User
 * Delete a bookmark for a current user by obj_type and obj_id.
 *
 * :param obj_type: type of object to bookmark
 * :type obj_type: str (enum) - "gene", "seqvar", "strucvar"
 * :param obj_id: id of object to bookmark
 * :type obj_id: uuid
 * :return: bookmark which was deleted
 * :rtype: dict
 * :raises HTTPException 404: if bookmark not found
 * :note: if user_agent is browser, return 204 Response
 */
export const deleteBookmarkForUserApiV1BookmarksDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkForUserApiV1BookmarksDeleteDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBookmarkForUserApiV1BookmarksDeleteDeleteResponse, DeleteBookmarkForUserApiV1BookmarksDeleteDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/delete'
}); };

/**
 * Delete Bookmark
 * Delete a bookmark. Available for superusers and bookmark owners.
 *
 * :param id: id of the bookmark
 * :type id: uuid
 * :return: bookmark which was deleted
 * :rtype: dict
 */
export const deleteBookmarkApiV1BookmarksDeleteByIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkApiV1BookmarksDeleteByIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBookmarkApiV1BookmarksDeleteByIdDeleteResponse, DeleteBookmarkApiV1BookmarksDeleteByIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/delete-by-id'
}); };

/**
 * Get Bookmark For User
 * Get a bookmark for a current user by obj_type and obj_id.
 *
 * :param obj_type: type of object to bookmark
 * :type obj_type: str (enum) - "gene", "seqvar", "strucvar"
 * :param obj_id: id of object to bookmark
 * :type obj_id: uuid
 * :return: bookmark
 * :rtype: dict
 * :raises HTTPException 404: if bookmark not found
 * :note: if user_agent is browser, return 204
 */
export const getBookmarkForUserApiV1BookmarksGetGet = <ThrowOnError extends boolean = false>(options: Options<GetBookmarkForUserApiV1BookmarksGetGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetBookmarkForUserApiV1BookmarksGetGetResponse, GetBookmarkForUserApiV1BookmarksGetGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/get'
}); };

/**
 * Get Bookmark
 * Get a bookmark by id. Available only for superusers.
 *
 * :param id: id of the bookmark
 * :type id: uuid
 * :return: bookmark
 * :rtype: dict
 */
export const getBookmarkApiV1BookmarksGetByIdGet = <ThrowOnError extends boolean = false>(options: Options<GetBookmarkApiV1BookmarksGetByIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetBookmarkApiV1BookmarksGetByIdGetResponse, GetBookmarkApiV1BookmarksGetByIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/get-by-id'
}); };

/**
 * List Bookmarks For User
 * List bookmarks for a current user.
 *
 * :param skip: number of bookmarks to skip
 * :type skip: int
 * :param limit: maximum number of bookmarks to return
 * :type limit: int
 * :return: list of bookmarks
 * :rtype: list
 */
export const listBookmarksForUserApiV1BookmarksListGet = <ThrowOnError extends boolean = false>(options?: Options<ListBookmarksForUserApiV1BookmarksListGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListBookmarksForUserApiV1BookmarksListGetResponse, ListBookmarksForUserApiV1BookmarksListGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/list'
}); };

/**
 * List Bookmarks
 * List all bookmarks. Available only for superusers.
 *
 * :param skip: number of bookmarks to skip
 * :type skip: int
 * :param limit: maximum number of bookmarks to return
 * :type limit: int
 * :return: list of bookmarks
 * :rtype: list
 */
export const listBookmarksApiV1BookmarksListAllGet = <ThrowOnError extends boolean = false>(options?: Options<ListBookmarksApiV1BookmarksListAllGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListBookmarksApiV1BookmarksListAllGetResponse, ListBookmarksApiV1BookmarksListAllGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/bookmarks/list-all'
}); };

/**
 * Create Caseinfo
 * Create a new Case Information.
 *
 * :param caseinfo: Case Information to create
 * :type caseinfo: dict or :class:`.schemas.CaseInfoCreate`
 * :return: Case Information
 * :rtype: dict
 */
export const createCaseinfoApiV1CaseinfoCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateCaseinfoApiV1CaseinfoCreatePostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCaseinfoApiV1CaseinfoCreatePostResponse, CreateCaseinfoApiV1CaseinfoCreatePostError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/create'
}); };

/**
 * Delete Caseinfo For User
 * Delete a Case Information for a current user.
 *
 * :return: Case Information
 * :rtype: dict
 */
export const deleteCaseinfoForUserApiV1CaseinfoDeleteDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteResponse, DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/delete'
}); };

/**
 * Delete Caseinfo
 * Delete a Case Information by id. Available only for superusers.
 *
 * :param id: Case Information id
 * :type id: uuid
 * :return: Case Information
 * :rtype: dict
 */
export const deleteCaseinfoApiV1CaseinfoDeleteByIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteResponse, DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/delete-by-id'
}); };

/**
 * Get Caseinfo For User
 * Get a Case Information for a current user.
 *
 * :return: Case Information
 * :rtype: dict
 */
export const getCaseinfoForUserApiV1CaseinfoGetGet = <ThrowOnError extends boolean = false>(options?: Options<GetCaseinfoForUserApiV1CaseinfoGetGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetCaseinfoForUserApiV1CaseinfoGetGetResponse, GetCaseinfoForUserApiV1CaseinfoGetGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/get'
}); };

/**
 * Get Caseinfo
 * Get a Case Information by id. Available only for superusers.
 *
 * :param id: Case Information id
 * :type id: uuid
 * :return: Case Information
 * :rtype: dict
 */
export const getCaseinfoApiV1CaseinfoGetByIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCaseinfoApiV1CaseinfoGetByIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetCaseinfoApiV1CaseinfoGetByIdGetResponse, GetCaseinfoApiV1CaseinfoGetByIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/get-by-id'
}); };

/**
 * List Caseinfos For User
 * List all Case Information for a current user.
 *
 * :return: list of Case Information
 * :rtype: list
 */
export const listCaseinfosForUserApiV1CaseinfoListGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListCaseinfosForUserApiV1CaseinfoListGetResponse, ListCaseinfosForUserApiV1CaseinfoListGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/list'
}); };

/**
 * List Caseinfos
 * List all Case Information. Available only for superusers.
 *
 * :param skip: number of Case Information to skip
 * :type skip: int
 * :param limit: maximum number of Case Information to return
 * :type limit: int
 * :return: list of Case Information
 * :rtype: list
 */
export const listCaseinfosApiV1CaseinfoListAllGet = <ThrowOnError extends boolean = false>(options?: Options<ListCaseinfosApiV1CaseinfoListAllGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListCaseinfosApiV1CaseinfoListAllGetResponse, ListCaseinfosApiV1CaseinfoListAllGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/list-all'
}); };

/**
 * Update Caseinfo For User
 * Update a Case Information for a current user.
 *
 * :param caseinfo: Case Information to update
 * :type caseinfo: dict or :class:`.schemas.CaseInfoUpdate`
 * :return: Case Information
 * :rtype: dict
 */
export const updateCaseinfoForUserApiV1CaseinfoUpdatePatch = <ThrowOnError extends boolean = false>(options: Options<UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/update'
}); };

/**
 * Update Caseinfo For User
 * Update a Case Information for a current user.
 *
 * :param caseinfo: Case Information to update
 * :type caseinfo: dict or :class:`.schemas.CaseInfoUpdate`
 * :return: Case Information
 * :rtype: dict
 */
export const updateCaseinfoForUserApiV1CaseinfoUpdatePut = <ThrowOnError extends boolean = false>(options: Options<UpdateCaseinfoForUserApiV1CaseinfoUpdatePutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateCaseinfoForUserApiV1CaseinfoUpdatePutResponse, UpdateCaseinfoForUserApiV1CaseinfoUpdatePutError, ThrowOnError>({
    ...options,
    url: '/api/v1/caseinfo/update'
}); };

/**
 * Update Submissionactivity
 * Create a new submission activity in the given thread.
 *
 * :param submissionthread_id: Submission thread UUID.
 * :return: Created submission activity.
 */
export const updateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutResponse, UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionactivities/{submissionactivity_id}'
}); };

/**
 * List Submissionthreads
 * List submission threads of current user in paginated fashion.
 *
 * :return: Paginated list of results.
 */
export const listSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGet = <ThrowOnError extends boolean = false>(options?: Options<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse, ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads'
}); };

/**
 * Create Submissionthread
 * Create a new submission thread.
 *
 * :param submissionthread: Data of submission thread to create.
 * :return: Created submission thread.
 */
export const createSubmissionthreadApiV1ClinvarsubSubmissionthreadsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostResponse, CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads'
}); };

/**
 * Delete Submissionthread
 * Update submission thread (current user must be owner).
 *
 * :return: Paginated list of results.
 */
export const deleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteResponse, DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads/{submissionthread_id}'
}); };

/**
 * Get Submissionthread By Id
 * Retrieve submission thread (current user must be owner).
 *
 * :param id: Submission thread UUID.
 * :return: Submission tread data.
 */
export const getSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetResponse, GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads/{submissionthread_id}'
}); };

/**
 * Update Submissionthread
 * Update submission thread (current user must be owner).
 *
 * :param id: Submission thread UUID.
 * :return: Submission tread data.
 */
export const updateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutResponse, UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads/{submissionthread_id}'
}); };

/**
 * List Submissionactivities
 * List submission activities of given submission thread.
 *
 * Current user must be owner.
 *
 * :param submissionthread_id: Submission thread UUID.
 * :return: Paginated list of results.
 */
export const listSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGet = <ThrowOnError extends boolean = false>(options: Options<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse, ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads/{submissionthread_id}/activities'
}); };

/**
 * Create Submissionactivity
 * Create a new submission activity in the given thread.
 *
 * :param submissionthread_id: Submission thread UUID.
 * :return: Created submission activity.
 */
export const createSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostResponse, CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submissionthreads/{submissionthread_id}/activities'
}); };

/**
 * List Submittingorgs
 * List submitting orgs of current user in paginated fashion.
 *
 * :return: Paginated list of results.
 */
export const listSubmittingorgsApiV1ClinvarsubSubmittingorgsGet = <ThrowOnError extends boolean = false>(options?: Options<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData, ThrowOnError>) => { return (options?.client ?? client).get<ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse, ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submittingorgs'
}); };

/**
 * Create Submittingorg
 * Create a new submitting org.
 *
 * :param submittingorg: Data of submitting org to create.
 * :return: Created submitting org.
 */
export const createSubmittingorgApiV1ClinvarsubSubmittingorgsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostResponse, CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submittingorgs'
}); };

/**
 * Delete Submittingorg
 * Update submitting org (current user must be owner).
 *
 * :return: Paginated list of results.
 */
export const deleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteResponse, DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submittingorgs/{submittingorg_id}'
}); };

/**
 * Get Submittingorg By Id
 * Retrieve submitting org (current user must be owner).
 *
 * :param id: Submitting org UUID.
 * :return: Submitting org data.
 */
export const getSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetResponse, GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submittingorgs/{submittingorg_id}'
}); };

/**
 * Update Submittingorg
 * Update submitting org (current user must be owner).
 *
 * :return: Paginated list of results.
 */
export const updateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutResponse, UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutError, ThrowOnError>({
    ...options,
    url: '/api/v1/clinvarsub/submittingorgs/{submittingorg_id}'
}); };

/**
 * Users:Current User
 */
export const usersCurrentUserApiV1UsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<UsersCurrentUserApiV1UsersMeGetResponse, UsersCurrentUserApiV1UsersMeGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/me'
}); };

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUserApiV1UsersMePatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchCurrentUserApiV1UsersMePatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersPatchCurrentUserApiV1UsersMePatchResponse, UsersPatchCurrentUserApiV1UsersMePatchError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/me'
}); };

/**
 * Users:Delete User
 */
export const usersDeleteUserApiV1UsersIdDelete = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteUserApiV1UsersIdDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<UsersDeleteUserApiV1UsersIdDeleteResponse, UsersDeleteUserApiV1UsersIdDeleteError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{id}'
}); };

/**
 * Users:User
 */
export const usersUserApiV1UsersIdGet = <ThrowOnError extends boolean = false>(options: Options<UsersUserApiV1UsersIdGetData, ThrowOnError>) => { return (options?.client ?? client).get<UsersUserApiV1UsersIdGetResponse, UsersUserApiV1UsersIdGetError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{id}'
}); };

/**
 * Users:Patch User
 */
export const usersPatchUserApiV1UsersIdPatch = <ThrowOnError extends boolean = false>(options: Options<UsersPatchUserApiV1UsersIdPatchData, ThrowOnError>) => { return (options?.client ?? client).patch<UsersPatchUserApiV1UsersIdPatchResponse, UsersPatchUserApiV1UsersIdPatchError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{id}'
}); };

/**
 * Test Email
 * Send out a test email.
 *
 * :param email_to: email address to send the test email to
 * :type email_to: str
 * :return: message
 * :rtype: dict
 */
export const testEmailApiV1UtilsTestEmailPost = <ThrowOnError extends boolean = false>(options: Options<TestEmailApiV1UtilsTestEmailPostData, ThrowOnError>) => { return (options?.client ?? client).post<TestEmailApiV1UtilsTestEmailPostResponse, TestEmailApiV1UtilsTestEmailPostError, ThrowOnError>({
    ...options,
    url: '/api/v1/utils/test-email/'
}); };

/**
 * Data Versions
 * Return versions of data and services used in the application.
 *
 * :return: A JSON response containing the versions of various data and services.
 * :rtype: dict
 */
export const dataVersionsInternalDataVersionsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<DataVersionsInternalDataVersionsGetResponse, DataVersionsInternalDataVersionsGetError, ThrowOnError>({
    ...options,
    url: '/internal/data-versions'
}); };

/**
 * Data Versions
 * Return versions of data and services used in the application.
 *
 * :return: A JSON response containing the versions of various data and services.
 * :rtype: dict
 */
export const dataVersionsInternalDataVersionsPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<DataVersionsInternalDataVersionsPostResponse, DataVersionsInternalDataVersionsPostError, ThrowOnError>({
    ...options,
    url: '/internal/data-versions'
}); };

/**
 * Frontend Settings
 * Return frontend settings.
 *
 * :return: frontend settings
 * :rtype: dict
 */
export const frontendSettingsInternalFrontendSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<FrontendSettingsInternalFrontendSettingsGetResponse, FrontendSettingsInternalFrontendSettingsGetError, ThrowOnError>({
    ...options,
    url: '/internal/frontend-settings'
}); };

/**
 * Frontend Settings
 * Return frontend settings.
 *
 * :return: frontend settings
 * :rtype: dict
 */
export const frontendSettingsInternalFrontendSettingsPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<FrontendSettingsInternalFrontendSettingsPostResponse, FrontendSettingsInternalFrontendSettingsPostError, ThrowOnError>({
    ...options,
    url: '/internal/frontend-settings'
}); };

/**
 * Reverse Proxy
 * Reverse proxy to internal services.
 * Supported services:
 * - AnnoNARS
 * - MeHARI
 * - Viguno
 * - NGINX
 * - Dotty
 * - CADA-Prio
 * - AutoACMG
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :return: response
 * :rtype: :class:`fastapi.Response`
 */
export const reverseProxyInternalProxyPathGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReverseProxyInternalProxyPathGetResponse, ReverseProxyInternalProxyPathGetError, ThrowOnError>({
    ...options,
    url: '/internal/proxy/{path}'
}); };

/**
 * Reverse Proxy
 * Reverse proxy to internal services.
 * Supported services:
 * - AnnoNARS
 * - MeHARI
 * - Viguno
 * - NGINX
 * - Dotty
 * - CADA-Prio
 * - AutoACMG
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :return: response
 * :rtype: :class:`fastapi.Response`
 */
export const reverseProxyInternalProxyPathPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<ReverseProxyInternalProxyPathPostResponse, ReverseProxyInternalProxyPathPostError, ThrowOnError>({
    ...options,
    url: '/internal/proxy/{path}'
}); };

/**
 * Acmg
 * Implement searching for ACMG classification for SNVs and indels.
 * Proxy requests to the `WinterVar <http://wintervar.wglab.org/>`_ backend.
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :return: ACMG classification
 * :rtype: dict
 */
export const acmgInternalRemoteAcmgPathGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AcmgInternalRemoteAcmgPathGetResponse, AcmgInternalRemoteAcmgPathGetError, ThrowOnError>({
    ...options,
    url: '/internal/remote/acmg/{path}'
}); };

/**
 * Cnv Acmg
 * Implement searching for ACMG classification for CNVs.
 * Proxy requests to the `wAutoCNV <https://phoenix.bgi.com/>`_ backend.
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :return: ACMG classification
 * :rtype: dict
 */
export const cnvAcmgInternalRemoteCnvAcmgPathGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<CnvAcmgInternalRemoteCnvAcmgPathGetResponse, CnvAcmgInternalRemoteCnvAcmgPathGetError, ThrowOnError>({
    ...options,
    url: '/internal/remote/cnv/acmg/{path}'
}); };

/**
 * Pubtator3 Api
 * Proxy requests to the `PubTator 3 <https://www.ncbi.nlm.nih.gov/research/pubtator3-api/>`_ backend.
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :param path: path to append to the backend URL
 * :type path: str
 * :return: response
 * :rtype: :class:`fastapi.responses.StreamingResponse`
 */
export const pubtator3ApiInternalRemotePubtator3ApiPathGet = <ThrowOnError extends boolean = false>(options: Options<Pubtator3ApiInternalRemotePubtator3ApiPathGetData, ThrowOnError>) => { return (options?.client ?? client).get<Pubtator3ApiInternalRemotePubtator3ApiPathGetResponse, Pubtator3ApiInternalRemotePubtator3ApiPathGetError, ThrowOnError>({
    ...options,
    url: '/internal/remote/pubtator3-api/{path}'
}); };

/**
 * Variantvalidator
 * Implement VariantValidator API. Proxy requests to the
 * `VariantValidator <https://rest.variantvalidator.org/>`_ backend.
 *
 * :param request: request
 * :type request: :class:`fastapi.Request`
 * :param path: path to append to the backend URL
 * :type path: str
 * :return: response
 * :rtype: :class:`fastapi.responses.StreamingResponse`
 */
export const variantvalidatorInternalRemoteVariantvalidatorPathGet = <ThrowOnError extends boolean = false>(options: Options<VariantvalidatorInternalRemoteVariantvalidatorPathGetData, ThrowOnError>) => { return (options?.client ?? client).get<VariantvalidatorInternalRemoteVariantvalidatorPathGetResponse, VariantvalidatorInternalRemoteVariantvalidatorPathGetError, ThrowOnError>({
    ...options,
    url: '/internal/remote/variantvalidator/{path}'
}); };

/**
 * Version
 * Return reev version.
 *
 * :return: reev version
 * :rtype: str
 */
export const versionInternalVersionGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<VersionInternalVersionGetResponse, VersionInternalVersionGetError, ThrowOnError>({
    ...options,
    url: '/internal/version'
}); };

/**
 * Version
 * Return reev version.
 *
 * :return: reev version
 * :rtype: str
 */
export const versionInternalVersionPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).post<VersionInternalVersionPostResponse, VersionInternalVersionPostError, ThrowOnError>({
    ...options,
    url: '/internal/version'
}); };