// This file is auto-generated by @hey-api/openapi-ts

export const AcmgRank_InputSchema = {
    properties: {
        comment: {
            title: 'Comment',
            type: 'string'
        },
        criterias: {
            items: {
                '$ref': '#/components/schemas/SeqVarCriteria'
            },
            title: 'Criterias',
            type: 'array'
        }
    },
    required: ['criterias', 'comment'],
    title: 'AcmgRank',
    type: 'object'
} as const;

export const AcmgRank_OutputSchema = {
    properties: {
        comment: {
            title: 'Comment',
            type: 'string'
        },
        criterias: {
            items: {
                '$ref': '#/components/schemas/SeqVarCriteria'
            },
            title: 'Criterias',
            type: 'array'
        }
    },
    required: ['criterias', 'comment'],
    title: 'AcmgRank',
    type: 'object'
} as const;

export const AcmgSeqVarCreate_InputSchema = {
    properties: {
        acmg_rank: {
            '$ref': '#/components/schemas/AcmgRank-Input'
        },
        seqvar_name: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$',
            title: 'Seqvar Name',
            type: 'string'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['seqvar_name', 'acmg_rank'],
    title: 'AcmgSeqVarCreate',
    type: 'object'
} as const;

export const AcmgSeqVarCreate_OutputSchema = {
    properties: {
        acmg_rank: {
            '$ref': '#/components/schemas/AcmgRank-Output'
        },
        seqvar_name: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$',
            title: 'Seqvar Name',
            type: 'string'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['seqvar_name', 'acmg_rank'],
    title: 'AcmgSeqVarCreate',
    type: 'object'
} as const;

export const AcmgSeqVarReadSchema = {
    properties: {
        acmg_rank: {
            '$ref': '#/components/schemas/AcmgRank-Output'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        seqvar_name: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$',
            title: 'Seqvar Name',
            type: 'string'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['seqvar_name', 'acmg_rank', 'id'],
    title: 'AcmgSeqVarRead',
    type: 'object'
} as const;

export const AcmgSeqVarUpdateSchema = {
    properties: {
        acmg_rank: {
            '$ref': '#/components/schemas/AcmgRank-Input'
        },
        seqvar_name: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$',
            title: 'Seqvar Name',
            type: 'string'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['seqvar_name', 'acmg_rank'],
    title: 'AcmgSeqVarUpdate',
    type: 'object'
} as const;

export const AdminMessageReadSchema = {
    properties: {
        active_start: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Active Start'
        },
        active_stop: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Active Stop'
        },
        enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enabled'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        text: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Text'
        },
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        }
    },
    required: ['id'],
    title: 'AdminMessageRead',
    type: 'object'
} as const;

export const AffectedStatusSchema = {
    enum: ['yes', 'no', 'unknown', 'not provided', 'not applicable'],
    title: 'AffectedStatus',
    type: 'string'
} as const;

export const AlleleOriginSchema = {
    enum: ['germline', 'somatic', 'de novo', 'unknown', 'inherited', 'maternal', 'paternal', 'biparental', 'not applicable'],
    title: 'AlleleOrigin',
    type: 'string'
} as const;

export const AssemblySchema = {
    enum: ['GRCh38', 'hg38', 'GRCh37', 'hg19', 'NCBI36', 'hg18'],
    title: 'Assembly',
    type: 'string'
} as const;

export const BatchProcessingStatusSchema = {
    enum: ['In processing', 'Success', 'Error', 'Partial success'],
    title: 'BatchProcessingStatus',
    type: 'string'
} as const;

export const BatchReleaseStatusSchema = {
    enum: ['Released', 'Partial released', 'Not released'],
    title: 'BatchReleaseStatus',
    type: 'string'
} as const;

export const BearerResponseSchema = {
    properties: {
        access_token: {
            title: 'Access Token',
            type: 'string'
        },
        token_type: {
            title: 'Token Type',
            type: 'string'
        }
    },
    required: ['access_token', 'token_type'],
    title: 'BearerResponse',
    type: 'object'
} as const;

export const Body_auth_bearer_login_api_v1_auth_bearer_login_postSchema = {
    properties: {
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        },
        grant_type: {
            anyOf: [
                {
                    pattern: 'password',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        password: {
            title: 'Password',
            type: 'string'
        },
        scope: {
            default: '',
            title: 'Scope',
            type: 'string'
        },
        username: {
            title: 'Username',
            type: 'string'
        }
    },
    required: ['username', 'password'],
    title: 'Body_auth_bearer_login_api_v1_auth_bearer_login_post',
    type: 'object'
} as const;

export const Body_auth_cookie_login_api_v1_auth_cookie_login_postSchema = {
    properties: {
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        },
        grant_type: {
            anyOf: [
                {
                    pattern: 'password',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        password: {
            title: 'Password',
            type: 'string'
        },
        scope: {
            default: '',
            title: 'Scope',
            type: 'string'
        },
        username: {
            title: 'Username',
            type: 'string'
        }
    },
    required: ['username', 'password'],
    title: 'Body_auth_cookie_login_api_v1_auth_cookie_login_post',
    type: 'object'
} as const;

export const Body_verify_request_token_api_v1_auth_request_verify_token_postSchema = {
    properties: {
        email: {
            format: 'email',
            title: 'Email',
            type: 'string'
        }
    },
    required: ['email'],
    title: 'Body_verify_request_token_api_v1_auth_request_verify_token_post',
    type: 'object'
} as const;

export const Body_verify_verify_api_v1_auth_verify_postSchema = {
    properties: {
        token: {
            title: 'Token',
            type: 'string'
        }
    },
    required: ['token'],
    title: 'Body_verify_verify_api_v1_auth_verify_post',
    type: 'object'
} as const;

export const BookmarkCreateSchema = {
    properties: {
        obj_id: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$|^(DEL|DUP)-(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-(\\d+)$|^HGNC:(\\d+)$',
            title: 'Obj Id',
            type: 'string'
        },
        obj_type: {
            '$ref': '#/components/schemas/BookmarkTypes'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['obj_type', 'obj_id'],
    title: 'BookmarkCreate',
    type: 'object'
} as const;

export const BookmarkReadSchema = {
    properties: {
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        obj_id: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$|^(DEL|DUP)-(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-(\\d+)$|^HGNC:(\\d+)$',
            title: 'Obj Id',
            type: 'string'
        },
        obj_type: {
            '$ref': '#/components/schemas/BookmarkTypes'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        }
    },
    required: ['obj_type', 'obj_id', 'id'],
    title: 'BookmarkRead',
    type: 'object'
} as const;

export const BookmarkTypesSchema = {
    enum: ['seqvar', 'strucvar', 'gene'],
    title: 'BookmarkTypes',
    type: 'string'
} as const;

export const CaseInfoCreateSchema = {
    properties: {
        affected_family_members: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Affected Family Members'
        },
        age_of_onset_month: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Age Of Onset Month'
        },
        diseases: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/DiseaseTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diseases'
        },
        ethnicity: {
            '$ref': '#/components/schemas/Ethnicity',
            default: 'reev:unknown_ethnicity'
        },
        family_segregation: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Family Segregation'
        },
        hpo_terms: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/HpoTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hpo Terms'
        },
        inheritance: {
            '$ref': '#/components/schemas/Inheritance',
            default: 'reev:unknown_inheritance'
        },
        pseudonym: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pseudonym'
        },
        sex: {
            '$ref': '#/components/schemas/Sex',
            default: 'reev:unknown_sex'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        },
        zygosity: {
            '$ref': '#/components/schemas/Zygosity',
            default: 'reev:unknown_zygosity'
        }
    },
    title: 'CaseInfoCreate',
    type: 'object'
} as const;

export const CaseInfoReadSchema = {
    properties: {
        affected_family_members: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Affected Family Members'
        },
        age_of_onset_month: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Age Of Onset Month'
        },
        diseases: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/DiseaseTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diseases'
        },
        ethnicity: {
            '$ref': '#/components/schemas/Ethnicity',
            default: 'reev:unknown_ethnicity'
        },
        family_segregation: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Family Segregation'
        },
        hpo_terms: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/HpoTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hpo Terms'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        inheritance: {
            '$ref': '#/components/schemas/Inheritance',
            default: 'reev:unknown_inheritance'
        },
        pseudonym: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pseudonym'
        },
        sex: {
            '$ref': '#/components/schemas/Sex',
            default: 'reev:unknown_sex'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        },
        zygosity: {
            '$ref': '#/components/schemas/Zygosity',
            default: 'reev:unknown_zygosity'
        }
    },
    required: ['id'],
    title: 'CaseInfoRead',
    type: 'object'
} as const;

export const CaseInfoUpdateSchema = {
    properties: {
        affected_family_members: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Affected Family Members'
        },
        age_of_onset_month: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Age Of Onset Month'
        },
        diseases: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/DiseaseTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diseases'
        },
        ethnicity: {
            '$ref': '#/components/schemas/Ethnicity',
            default: 'reev:unknown_ethnicity'
        },
        family_segregation: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Family Segregation'
        },
        hpo_terms: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/HpoTerm'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hpo Terms'
        },
        inheritance: {
            '$ref': '#/components/schemas/Inheritance',
            default: 'reev:unknown_inheritance'
        },
        pseudonym: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pseudonym'
        },
        sex: {
            '$ref': '#/components/schemas/Sex',
            default: 'reev:unknown_sex'
        },
        user: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User'
        },
        zygosity: {
            '$ref': '#/components/schemas/Zygosity',
            default: 'reev:unknown_zygosity'
        }
    },
    title: 'CaseInfoUpdate',
    type: 'object'
} as const;

export const ChromosomeSchema = {
    enum: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', 'X', 'Y', 'MT'],
    title: 'Chromosome',
    type: 'string'
} as const;

export const CitationDbSchema = {
    description: `Allowed values for a citation's \`db\` field.

The values of the enumeration map to the values used by the ClinVar submission API.`,
    enum: ['PubMed', 'BookShelf', 'DOI', 'pmc'],
    title: 'CitationDb',
    type: 'string'
} as const;

export const ClinicalFeaturesAffectedStatusSchema = {
    enum: ['present', 'absent', 'not tested'],
    title: 'ClinicalFeaturesAffectedStatus',
    type: 'string'
} as const;

export const ClinicalFeaturesDbSchema = {
    const: 'HP',
    enum: ['HP'],
    title: 'ClinicalFeaturesDb',
    type: 'string'
} as const;

export const ClinicalSignificanceDescriptionSchema = {
    description: `Allowed values for the \`\`clinicalSignificanceDescription\`\` and
\`\`germlineClassificationDescription\`\`.

The values of the enumeration map to the values used by the ClinVar submission API.`,
    enum: ['Pathogenic', 'Likely pathogenic', 'Uncertain significance', 'Likely benign', 'Benign', 'Pathogenic, low penetrance', 'Uncertain risk allele', 'Likely pathogenic, low penetrance', 'Established risk allele', 'Likely risk allele', 'affects', 'association', 'drug response', 'confers sensitivity', 'protective', 'other', 'not provided'],
    title: 'ClinicalSignificanceDescription',
    type: 'string'
} as const;

export const CollectionMethodSchema = {
    enum: ['curation', 'literature only', 'reference population', 'provider interpretation', 'phenotyping only', 'case-control', 'clinical testing', 'in vitro', 'in vivo', 'research', 'not provided'],
    title: 'CollectionMethod',
    type: 'string'
} as const;

export const ConditionDbSchema = {
    enum: ['OMIM', 'MedGen', 'Orphanet', 'MeSH', 'HP', 'MONDO'],
    title: 'ConditionDb',
    type: 'string'
} as const;

export const CreatedSchema = {
    properties: {
        id: {
            title: 'Id',
            type: 'string'
        }
    },
    required: ['id'],
    title: 'Created',
    type: 'object'
} as const;

export const CriteriaSchema = {
    enum: ['PVS1', 'PS1', 'PS2', 'PS3', 'PS4', 'PM1', 'PM2', 'PM3', 'PM4', 'PM5', 'PM6', 'PP1', 'PP2', 'PP3', 'PP4', 'BA1', 'BS1', 'BS2', 'BS3', 'BS4', 'BP1', 'BP2', 'BP3', 'BP4', 'BP5', 'BP7'],
    title: 'Criteria',
    type: 'string'
} as const;

export const DiseaseTermSchema = {
    properties: {
        name: {
            title: 'Name',
            type: 'string'
        },
        omimId: {
            title: 'Omimid',
            type: 'string'
        }
    },
    required: ['omimId', 'name'],
    title: 'DiseaseTerm',
    type: 'object'
} as const;

export const ErrorCodeSchema = {
    enum: ['0', '1', '2'],
    title: 'ErrorCode',
    type: 'string'
} as const;

export const ErrorModelSchema = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    required: ['detail'],
    title: 'ErrorModel',
    type: 'object'
} as const;

export const EthnicitySchema = {
    enum: ['NCIT:C128937', 'NCIT:C17950', 'NCIT:C161419', 'NCIT:C43865', 'NCIT:C43851', 'NCIT:C17459', 'NCIT:C43866', 'NCIT:C41263', 'NCIT:C104495', 'reev:unknown_ethnicity'],
    title: 'Ethnicity',
    type: 'string'
} as const;

export const EvidenceSchema = {
    enum: ['Pathogenic Very Strong', 'Pathogenic Strong', 'Pathogenic Moderate', 'Pathogenic Supporting', 'Benign Standalone', 'Benign Strong', 'Benign Supporting', 'Not Set'],
    title: 'Evidence',
    type: 'string'
} as const;

export const GermlineClassification_InputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        custom_classification_score: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custom Classification Score'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        explanation_of_drug_response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Drug Response'
        },
        explanation_of_other_classification: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Other Classification'
        },
        germline_classification_description: {
            '$ref': '#/components/schemas/ClinicalSignificanceDescription'
        },
        mode_of_inheritance: {
            '$ref': '#/components/schemas/ModeOfInheritance'
        }
    },
    required: ['germline_classification_description', 'mode_of_inheritance'],
    title: 'GermlineClassification',
    type: 'object'
} as const;

export const GermlineClassification_OutputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        custom_classification_score: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custom Classification Score'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        explanation_of_drug_response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Drug Response'
        },
        explanation_of_other_classification: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Other Classification'
        },
        germline_classification_description: {
            '$ref': '#/components/schemas/ClinicalSignificanceDescription'
        },
        mode_of_inheritance: {
            '$ref': '#/components/schemas/ModeOfInheritance'
        }
    },
    required: ['germline_classification_description', 'mode_of_inheritance'],
    title: 'GermlineClassification',
    type: 'object'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            title: 'Detail',
            type: 'array'
        }
    },
    title: 'HTTPValidationError',
    type: 'object'
} as const;

export const HpoTermSchema = {
    properties: {
        name: {
            title: 'Name',
            type: 'string'
        },
        termId: {
            title: 'Termid',
            type: 'string'
        }
    },
    required: ['termId', 'name'],
    title: 'HpoTerm',
    type: 'object'
} as const;

export const InheritanceSchema = {
    enum: ['NCIT:C94245', 'NCIT:C94246', 'NCIT:C94599', 'NCIT:C93189', 'NCIT:C94542', 'NCIT:C94247', 'reev:unknown_inheritance'],
    title: 'Inheritance',
    type: 'string'
} as const;

export const ModeOfInheritanceSchema = {
    enum: ['Autosomal dominant inheritance', 'Autosomal recessive inheritance', 'Mitochondrial inheritance', 'Genetic anticipation', 'Sporadic', 'Sex-limited autosomal dominant', 'Somatic mutation', 'X-linked recessive inheritance', 'X-linked dominant inheritance', 'Y-linked inheritance', 'Other', 'X-linked inheritance', 'Codominant', 'Semidominant inheritance', 'Autosomal unknown', 'Autosomal dominant inheritance with maternal imprinting', 'Autosomal dominant inheritance with paternal imprinting', 'Multifactorial inheritance', 'Unknown mechanism', 'Oligogenic inheritance'],
    title: 'ModeOfInheritance',
    type: 'string'
} as const;

export const MsgSchema = {
    properties: {
        msg: {
            title: 'Msg',
            type: 'string'
        }
    },
    required: ['msg'],
    title: 'Msg',
    type: 'object'
} as const;

export const MultipleConditionExplanationSchema = {
    enum: ['Novel disease', 'Uncertain', 'Co-occurring'],
    title: 'MultipleConditionExplanation',
    type: 'string'
} as const;

export const OAuth2ProviderPublicSchema = {
    description: 'Information exposed via API.',
    properties: {
        label: {
            title: 'Label',
            type: 'string'
        },
        name: {
            title: 'Name',
            type: 'string'
        }
    },
    required: ['name', 'label'],
    title: 'OAuth2ProviderPublic',
    type: 'object'
} as const;

export const OncogenicityClassificationDescriptionSchema = {
    enum: ['Oncogenic', 'Likely Oncogenic', ['Uncertain significance'], ['Likely benign'], 'Benign'],
    title: 'OncogenicityClassificationDescription'
} as const;

export const PresenceSchema = {
    enum: ['Present', 'Absent', 'Unknown'],
    title: 'Presence',
    type: 'string'
} as const;

export const PresenceOfSomaticVariantInNormalTissueSchema = {
    enum: ['present', 'absent', 'not tested'],
    title: 'PresenceOfSomaticVariantInNormalTissue',
    type: 'string'
} as const;

export const PublicOAuthAccountSchema = {
    description: 'Public part of OAuth account model.',
    properties: {
        account_email: {
            title: 'Account Email',
            type: 'string'
        },
        account_id: {
            title: 'Account Id',
            type: 'string'
        },
        id: {
            title: 'Id'
        },
        oauth_name: {
            title: 'Oauth Name',
            type: 'string'
        }
    },
    required: ['id', 'oauth_name', 'account_id', 'account_email'],
    title: 'PublicOAuthAccount',
    type: 'object'
} as const;

export const RecordStatusSchema = {
    enum: ['novel', 'update'],
    title: 'RecordStatus',
    type: 'string'
} as const;

export const ReleaseStatusSchema = {
    enum: ['public', 'hold until published'],
    title: 'ReleaseStatus',
    type: 'string'
} as const;

export const ResponseMessageSchema = {
    description: `A simple response message from ClinVar.

This is used for storing the error messages from ClinVar.`,
    properties: {
        text: {
            title: 'Text',
            type: 'string'
        }
    },
    required: ['text'],
    title: 'ResponseMessage',
    type: 'object'
} as const;

export const RetrieveStatusResult_InputSchema = {
    description: 'Result type for ``retrieve_status`` function.',
    properties: {
        status: {
            '$ref': '#/components/schemas/SubmissionStatus-Input'
        },
        summaries: {
            additionalProperties: {
                '$ref': '#/components/schemas/SummaryResponse-Input'
            },
            title: 'Summaries',
            type: 'object'
        }
    },
    required: ['status', 'summaries'],
    title: 'RetrieveStatusResult',
    type: 'object'
} as const;

export const RetrieveStatusResult_OutputSchema = {
    description: 'Result type for ``retrieve_status`` function.',
    properties: {
        status: {
            '$ref': '#/components/schemas/SubmissionStatus-Output'
        },
        summaries: {
            additionalProperties: {
                '$ref': '#/components/schemas/SummaryResponse-Output'
            },
            title: 'Summaries',
            type: 'object'
        }
    },
    required: ['status', 'summaries'],
    title: 'RetrieveStatusResult',
    type: 'object'
} as const;

export const SeqVarCriteriaSchema = {
    properties: {
        criteria: {
            '$ref': '#/components/schemas/Criteria'
        },
        evidence: {
            '$ref': '#/components/schemas/Evidence'
        },
        presence: {
            '$ref': '#/components/schemas/Presence'
        },
        summary: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Summary'
        }
    },
    required: ['criteria', 'presence', 'evidence'],
    title: 'SeqVarCriteria',
    type: 'object'
} as const;

export const SexSchema = {
    enum: ['PATO:0000384', 'PATO:0000383', 'reev:unknown_sex'],
    title: 'Sex',
    type: 'string'
} as const;

export const SomaticClinicalImpactAssertionTypeSchema = {
    enum: ['therapeutic: sensitivity/response', 'therapeutic: resistance', 'therapeutic: reduced sensitivity', 'diagnostic: supports diagnosis', 'diagnostic: excludes diagnosis', 'prognostic: better outcome', 'prognostic: poor outcome'],
    title: 'SomaticClinicalImpactAssertionType',
    type: 'string'
} as const;

export const SomaticClinicalImpactClassification_InputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        assertion_type_for_clinical_impact: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SomaticClinicalImpactAssertionType'
                },
                {
                    type: 'null'
                }
            ]
        },
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        clinical_impact_classification_description: {
            '$ref': '#/components/schemas/SomaticClinicalImpactClassificationDescription'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        drug_for_therapeutic_assertion: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug For Therapeutic Assertion'
        }
    },
    required: ['clinical_impact_classification_description'],
    title: 'SomaticClinicalImpactClassification',
    type: 'object'
} as const;

export const SomaticClinicalImpactClassification_OutputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        assertion_type_for_clinical_impact: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SomaticClinicalImpactAssertionType'
                },
                {
                    type: 'null'
                }
            ]
        },
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        clinical_impact_classification_description: {
            '$ref': '#/components/schemas/SomaticClinicalImpactClassificationDescription'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        drug_for_therapeutic_assertion: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug For Therapeutic Assertion'
        }
    },
    required: ['clinical_impact_classification_description'],
    title: 'SomaticClinicalImpactClassification',
    type: 'object'
} as const;

export const SomaticClinicalImpactClassificationDescriptionSchema = {
    enum: ['Tier I - Strong', 'Tier II - Potential', 'Tier III - Unknown', 'Tier IV - Benign/Likely benign'],
    title: 'SomaticClinicalImpactClassificationDescription',
    type: 'string'
} as const;

export const SomaticOncogenicityClassification_InputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        oncogenicity_classification_description: {
            '$ref': '#/components/schemas/OncogenicityClassificationDescription'
        }
    },
    required: ['oncogenicity_classification_description'],
    title: 'SomaticOncogenicityClassification',
    type: 'object'
} as const;

export const SomaticOncogenicityClassification_OutputSchema = {
    description: 'Details of somatic clinical impact classification.',
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        oncogenicity_classification_description: {
            '$ref': '#/components/schemas/OncogenicityClassificationDescription'
        }
    },
    required: ['oncogenicity_classification_description'],
    title: 'SomaticOncogenicityClassification',
    type: 'object'
} as const;

export const StructVarMethodTypeSchema = {
    enum: ['SNP array', 'Oligo array', 'Read depth', 'Paired-end mapping', 'One end anchored assembly', 'Sequence alignment', 'Optical mapping', 'Curated,PCR'],
    title: 'StructVarMethodType',
    type: 'string'
} as const;

export const SubmissionActivityCreateSchema = {
    properties: {
        kind: {
            '$ref': '#/components/schemas/SubmissionActivityKind'
        },
        request_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionContainer-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        request_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Request Timestamp'
        },
        response_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResponseMessage'
                },
                {
                    '$ref': '#/components/schemas/Created'
                },
                {
                    '$ref': '#/components/schemas/RetrieveStatusResult-Input'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Payload'
        },
        response_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Timestamp'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionActivityStatus'
        },
        submissionthread_id: {
            format: 'uuid',
            title: 'Submissionthread Id',
            type: 'string'
        }
    },
    required: ['kind', 'status', 'submissionthread_id'],
    title: 'SubmissionActivityCreate',
    type: 'object'
} as const;

export const SubmissionActivityKindSchema = {
    description: 'Type of the :ref:`SubmissionActivity`.',
    enum: ['create', 'retrieve', 'update', 'delete'],
    title: 'SubmissionActivityKind',
    type: 'string'
} as const;

export const SubmissionActivityReadSchema = {
    properties: {
        created: {
            format: 'date-time',
            title: 'Created',
            type: 'string'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        kind: {
            '$ref': '#/components/schemas/SubmissionActivityKind'
        },
        request_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionContainer-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        request_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Request Timestamp'
        },
        response_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResponseMessage'
                },
                {
                    '$ref': '#/components/schemas/Created'
                },
                {
                    '$ref': '#/components/schemas/RetrieveStatusResult-Output'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Payload'
        },
        response_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Timestamp'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionActivityStatus'
        },
        submissionthread_id: {
            format: 'uuid',
            title: 'Submissionthread Id',
            type: 'string'
        }
    },
    required: ['kind', 'status', 'id', 'created', 'submissionthread_id'],
    title: 'SubmissionActivityRead',
    type: 'object'
} as const;

export const SubmissionActivityStatusSchema = {
    description: `Status of a :ref:\`SubmissionActivity\`.

An activity starts out waiting in the queue to be picked up by the
worker, goes on into being processed, and ends up being complete
or failed.  An activity can also end up being in a timeout state.`,
    enum: ['initial', 'waiting', 'in_progress', 'complete_success', 'complete_failure', 'complete_in_progress', 'failed', 'timeout'],
    title: 'SubmissionActivityStatus',
    type: 'string'
} as const;

export const SubmissionActivityUpdateSchema = {
    properties: {
        kind: {
            '$ref': '#/components/schemas/SubmissionActivityKind'
        },
        request_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionContainer-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        request_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Request Timestamp'
        },
        response_payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ResponseMessage'
                },
                {
                    '$ref': '#/components/schemas/Created'
                },
                {
                    '$ref': '#/components/schemas/RetrieveStatusResult-Input'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Payload'
        },
        response_timestamp: {
            anyOf: [
                {
                    format: 'date-time',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response Timestamp'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionActivityStatus'
        }
    },
    required: ['kind', 'status'],
    title: 'SubmissionActivityUpdate',
    type: 'object'
} as const;

export const SubmissionAssertionCriteriaSchema = {
    properties: {
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CitationDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Url'
        }
    },
    title: 'SubmissionAssertionCriteria',
    type: 'object'
} as const;

export const SubmissionChromosomeCoordinatesSchema = {
    properties: {
        accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Accession'
        },
        alternate_allele: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Alternate Allele'
        },
        assembly: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Assembly'
                },
                {
                    type: 'null'
                }
            ]
        },
        chromosome: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Chromosome'
                },
                {
                    type: 'null'
                }
            ]
        },
        inner_start: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inner Start'
        },
        inner_stop: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inner Stop'
        },
        outer_start: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Outer Start'
        },
        outer_stop: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Outer Stop'
        },
        reference_allele: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Allele'
        },
        start: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        stop: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stop'
        },
        variant_length: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Variant Length'
        }
    },
    title: 'SubmissionChromosomeCoordinates',
    type: 'object'
} as const;

export const SubmissionCitationSchema = {
    properties: {
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CitationDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Url'
        }
    },
    title: 'SubmissionCitation',
    type: 'object'
} as const;

export const SubmissionClinicalFeatureSchema = {
    properties: {
        clinical_features_affected_status: {
            '$ref': '#/components/schemas/ClinicalFeaturesAffectedStatus'
        },
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ClinicalFeaturesDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    required: ['clinical_features_affected_status'],
    title: 'SubmissionClinicalFeature',
    type: 'object'
} as const;

export const SubmissionClinicalImpactSubmission_InputSchema = {
    properties: {
        clinical_impact_classification: {
            '$ref': '#/components/schemas/SomaticClinicalImpactClassification-Input'
        },
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetSomatic-Input'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInSomatic-Input'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'clinical_impact_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionClinicalImpactSubmission',
    type: 'object'
} as const;

export const SubmissionClinicalImpactSubmission_OutputSchema = {
    properties: {
        clinical_impact_classification: {
            '$ref': '#/components/schemas/SomaticClinicalImpactClassification-Output'
        },
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetSomatic-Output'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInSomatic-Output'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'clinical_impact_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionClinicalImpactSubmission',
    type: 'object'
} as const;

export const SubmissionClinicalSignificance_InputSchema = {
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        clinical_significance_description: {
            '$ref': '#/components/schemas/ClinicalSignificanceDescription'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        custom_assertion_score: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custom Assertion Score'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        explanation_of_drug_response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Drug Response'
        },
        explanation_of_other_clinical_significance: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Other Clinical Significance'
        },
        mode_of_inheritance: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ModeOfInheritance'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['clinical_significance_description'],
    title: 'SubmissionClinicalSignificance',
    type: 'object'
} as const;

export const SubmissionClinicalSignificance_OutputSchema = {
    properties: {
        citation: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCitation'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Citation'
        },
        clinical_significance_description: {
            '$ref': '#/components/schemas/ClinicalSignificanceDescription'
        },
        comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Comment'
        },
        custom_assertion_score: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Custom Assertion Score'
        },
        date_last_evaluated: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Last Evaluated'
        },
        explanation_of_drug_response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Drug Response'
        },
        explanation_of_other_clinical_significance: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Explanation Of Other Clinical Significance'
        },
        mode_of_inheritance: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ModeOfInheritance'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['clinical_significance_description'],
    title: 'SubmissionClinicalSignificance',
    type: 'object'
} as const;

export const SubmissionClinvarDeletionSchema = {
    properties: {
        accession_set: {
            items: {
                '$ref': '#/components/schemas/SubmissionClinvarDeletionAccessionSet'
            },
            title: 'Accession Set',
            type: 'array'
        }
    },
    required: ['accession_set'],
    title: 'SubmissionClinvarDeletion',
    type: 'object'
} as const;

export const SubmissionClinvarDeletionAccessionSetSchema = {
    properties: {
        accession: {
            title: 'Accession',
            type: 'string'
        },
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason'
        }
    },
    required: ['accession'],
    title: 'SubmissionClinvarDeletionAccessionSet',
    type: 'object'
} as const;

export const SubmissionClinvarSubmission_InputSchema = {
    properties: {
        clinical_significance: {
            '$ref': '#/components/schemas/SubmissionClinicalSignificance-Input'
        },
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetGermline-Input'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInGermline-Input'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'clinical_significance', 'condition_set', 'observed_in'],
    title: 'SubmissionClinvarSubmission',
    type: 'object'
} as const;

export const SubmissionClinvarSubmission_OutputSchema = {
    properties: {
        clinical_significance: {
            '$ref': '#/components/schemas/SubmissionClinicalSignificance-Output'
        },
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetGermline-Output'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInGermline-Output'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'clinical_significance', 'condition_set', 'observed_in'],
    title: 'SubmissionClinvarSubmission',
    type: 'object'
} as const;

export const SubmissionCompoundHeterozygoteSet_InputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variant_sets: {
            items: {
                '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSetVariantSet-Input'
            },
            title: 'Variant Sets',
            type: 'array'
        }
    },
    required: ['hgvs', 'variant_sets'],
    title: 'SubmissionCompoundHeterozygoteSet',
    type: 'object'
} as const;

export const SubmissionCompoundHeterozygoteSet_OutputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variant_sets: {
            items: {
                '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSetVariantSet-Output'
            },
            title: 'Variant Sets',
            type: 'array'
        }
    },
    required: ['hgvs', 'variant_sets'],
    title: 'SubmissionCompoundHeterozygoteSet',
    type: 'object'
} as const;

export const SubmissionCompoundHeterozygoteSetVariantSet_InputSchema = {
    properties: {
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionCompoundHeterozygoteSetVariantSet',
    type: 'object'
} as const;

export const SubmissionCompoundHeterozygoteSetVariantSet_OutputSchema = {
    properties: {
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionCompoundHeterozygoteSetVariantSet',
    type: 'object'
} as const;

export const SubmissionConditionSchema = {
    properties: {
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConditionDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    title: 'SubmissionCondition',
    type: 'object'
} as const;

export const SubmissionConditionSetGermline_InputSchema = {
    properties: {
        condition: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCondition'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Condition'
        },
        drug_response: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionDrugResponse-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Response'
        },
        multiple_condition_explanation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MultipleConditionExplanation'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionConditionSetGermline',
    type: 'object'
} as const;

export const SubmissionConditionSetGermline_OutputSchema = {
    properties: {
        condition: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCondition'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Condition'
        },
        drug_response: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionDrugResponse-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Response'
        },
        multiple_condition_explanation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MultipleConditionExplanation'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionConditionSetGermline',
    type: 'object'
} as const;

export const SubmissionConditionSetSomatic_InputSchema = {
    properties: {
        condition: {
            items: {
                '$ref': '#/components/schemas/SubmissionCondition'
            },
            title: 'Condition',
            type: 'array'
        },
        drug_response: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionDrugResponse-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Response'
        },
        multiple_condition_explanation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MultipleConditionExplanation'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['condition'],
    title: 'SubmissionConditionSetSomatic',
    type: 'object'
} as const;

export const SubmissionConditionSetSomatic_OutputSchema = {
    properties: {
        condition: {
            items: {
                '$ref': '#/components/schemas/SubmissionCondition'
            },
            title: 'Condition',
            type: 'array'
        },
        drug_response: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionDrugResponse-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Response'
        },
        multiple_condition_explanation: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MultipleConditionExplanation'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['condition'],
    title: 'SubmissionConditionSetSomatic',
    type: 'object'
} as const;

export const SubmissionContainer_InputSchema = {
    properties: {
        assertion_criteria: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionAssertionCriteria'
                },
                {
                    type: 'null'
                }
            ]
        },
        behalf_org_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Behalf Org Id'
        },
        clinical_impact_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalImpactSubmission-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Impact Submission'
        },
        clinvar_deletion: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionClinvarDeletion'
                },
                {
                    type: 'null'
                }
            ]
        },
        clinvar_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinvarSubmission-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Submission'
        },
        clinvar_submission_release_status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReleaseStatus'
                },
                {
                    type: 'null'
                }
            ]
        },
        germline_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionGermlineSubmission-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Germline Submission'
        },
        oncogenicity_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionOncogenicitySubmission-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Oncogenicity Submission'
        },
        submission_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Submission Name'
        }
    },
    title: 'SubmissionContainer',
    type: 'object'
} as const;

export const SubmissionContainer_OutputSchema = {
    properties: {
        assertion_criteria: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionAssertionCriteria'
                },
                {
                    type: 'null'
                }
            ]
        },
        behalf_org_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Behalf Org Id'
        },
        clinical_impact_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalImpactSubmission-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Impact Submission'
        },
        clinvar_deletion: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionClinvarDeletion'
                },
                {
                    type: 'null'
                }
            ]
        },
        clinvar_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinvarSubmission-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Submission'
        },
        clinvar_submission_release_status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ReleaseStatus'
                },
                {
                    type: 'null'
                }
            ]
        },
        germline_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionGermlineSubmission-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Germline Submission'
        },
        oncogenicity_submission: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionOncogenicitySubmission-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Oncogenicity Submission'
        },
        submission_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Submission Name'
        }
    },
    title: 'SubmissionContainer',
    type: 'object'
} as const;

export const SubmissionDiplotypeSet_InputSchema = {
    properties: {
        haplotype_sets: {
            items: {
                '$ref': '#/components/schemas/SubmissionHaplotypeSets-Input'
            },
            title: 'Haplotype Sets',
            type: 'array'
        },
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        star_allele_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Star Allele Name'
        }
    },
    required: ['haplotype_sets', 'hgvs'],
    title: 'SubmissionDiplotypeSet',
    type: 'object'
} as const;

export const SubmissionDiplotypeSet_OutputSchema = {
    properties: {
        haplotype_sets: {
            items: {
                '$ref': '#/components/schemas/SubmissionHaplotypeSets-Output'
            },
            title: 'Haplotype Sets',
            type: 'array'
        },
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        star_allele_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Star Allele Name'
        }
    },
    required: ['haplotype_sets', 'hgvs'],
    title: 'SubmissionDiplotypeSet',
    type: 'object'
} as const;

export const SubmissionDistinctChromosomesSet_InputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Input'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionDistinctChromosomesSet',
    type: 'object'
} as const;

export const SubmissionDistinctChromosomesSet_OutputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Output'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionDistinctChromosomesSet',
    type: 'object'
} as const;

export const SubmissionDrugResponse_InputSchema = {
    properties: {
        condition: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCondition'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Condition'
        },
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConditionDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        drug_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Name'
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        }
    },
    title: 'SubmissionDrugResponse',
    type: 'object'
} as const;

export const SubmissionDrugResponse_OutputSchema = {
    properties: {
        condition: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionCondition'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Condition'
        },
        db: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ConditionDb'
                },
                {
                    type: 'null'
                }
            ]
        },
        drug_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Drug Name'
        },
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        }
    },
    title: 'SubmissionDrugResponse',
    type: 'object'
} as const;

export const SubmissionGermlineSubmission_InputSchema = {
    properties: {
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetGermline-Input'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        germline_classification: {
            '$ref': '#/components/schemas/GermlineClassification-Input'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInGermline-Input'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'germline_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionGermlineSubmission',
    type: 'object'
} as const;

export const SubmissionGermlineSubmission_OutputSchema = {
    properties: {
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetGermline-Output'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        germline_classification: {
            '$ref': '#/components/schemas/GermlineClassification-Output'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInGermline-Output'
            },
            title: 'Observed In',
            type: 'array'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'germline_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionGermlineSubmission',
    type: 'object'
} as const;

export const SubmissionHaplotypeSet_InputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        star_allele_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Star Allele Name'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Input'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionHaplotypeSet',
    type: 'object'
} as const;

export const SubmissionHaplotypeSet_OutputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        star_allele_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Star Allele Name'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Output'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionHaplotypeSet',
    type: 'object'
} as const;

export const SubmissionHaplotypeSets_InputSchema = {
    properties: {
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionHaplotypeSets',
    type: 'object'
} as const;

export const SubmissionHaplotypeSets_OutputSchema = {
    properties: {
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionHaplotypeSets',
    type: 'object'
} as const;

export const SubmissionObservedInGermline_InputSchema = {
    properties: {
        affected_status: {
            '$ref': '#/components/schemas/AffectedStatus'
        },
        allele_origin: {
            '$ref': '#/components/schemas/AlleleOrigin'
        },
        clinical_features: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalFeature'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features'
        },
        clinical_features_comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features Comment'
        },
        collection_method: {
            '$ref': '#/components/schemas/CollectionMethod'
        },
        number_of_individuals: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number Of Individuals'
        },
        struct_var_method_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StructVarMethodType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['affected_status', 'allele_origin', 'collection_method'],
    title: 'SubmissionObservedInGermline',
    type: 'object'
} as const;

export const SubmissionObservedInGermline_OutputSchema = {
    properties: {
        affected_status: {
            '$ref': '#/components/schemas/AffectedStatus'
        },
        allele_origin: {
            '$ref': '#/components/schemas/AlleleOrigin'
        },
        clinical_features: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalFeature'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features'
        },
        clinical_features_comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features Comment'
        },
        collection_method: {
            '$ref': '#/components/schemas/CollectionMethod'
        },
        number_of_individuals: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number Of Individuals'
        },
        struct_var_method_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StructVarMethodType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['affected_status', 'allele_origin', 'collection_method'],
    title: 'SubmissionObservedInGermline',
    type: 'object'
} as const;

export const SubmissionObservedInSomatic_InputSchema = {
    properties: {
        affected_status: {
            '$ref': '#/components/schemas/AffectedStatus'
        },
        allele_origin: {
            '$ref': '#/components/schemas/AlleleOrigin'
        },
        clinical_features: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalFeature'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features'
        },
        clinical_features_comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features Comment'
        },
        collection_method: {
            '$ref': '#/components/schemas/CollectionMethod'
        },
        number_of_individuals: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number Of Individuals'
        },
        presence_of_somatic_variant_in_normal_tissue: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PresenceOfSomaticVariantInNormalTissue'
                },
                {
                    type: 'null'
                }
            ]
        },
        somatic_variant_allele_fraction: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Somatic Variant Allele Fraction'
        },
        struct_var_method_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StructVarMethodType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['affected_status', 'allele_origin', 'collection_method'],
    title: 'SubmissionObservedInSomatic',
    type: 'object'
} as const;

export const SubmissionObservedInSomatic_OutputSchema = {
    properties: {
        affected_status: {
            '$ref': '#/components/schemas/AffectedStatus'
        },
        allele_origin: {
            '$ref': '#/components/schemas/AlleleOrigin'
        },
        clinical_features: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionClinicalFeature'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features'
        },
        clinical_features_comment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinical Features Comment'
        },
        collection_method: {
            '$ref': '#/components/schemas/CollectionMethod'
        },
        number_of_individuals: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number Of Individuals'
        },
        presence_of_somatic_variant_in_normal_tissue: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PresenceOfSomaticVariantInNormalTissue'
                },
                {
                    type: 'null'
                }
            ]
        },
        somatic_variant_allele_fraction: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Somatic Variant Allele Fraction'
        },
        struct_var_method_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StructVarMethodType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['affected_status', 'allele_origin', 'collection_method'],
    title: 'SubmissionObservedInSomatic',
    type: 'object'
} as const;

export const SubmissionOncogenicitySubmission_InputSchema = {
    properties: {
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetSomatic-Input'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInSomatic-Input'
            },
            title: 'Observed In',
            type: 'array'
        },
        oncogenicity_classification: {
            '$ref': '#/components/schemas/SomaticOncogenicityClassification-Input'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Input'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'oncogenicity_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionOncogenicitySubmission',
    type: 'object'
} as const;

export const SubmissionOncogenicitySubmission_OutputSchema = {
    properties: {
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        compound_heterozygote_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionCompoundHeterozygoteSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        condition_set: {
            '$ref': '#/components/schemas/SubmissionConditionSetSomatic-Output'
        },
        diplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDiplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        distinct_chromosomes_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionDistinctChromosomesSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        extra_data: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra Data'
        },
        haplotype_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        haplotype_single_variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionHaplotypeSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        },
        observed_in: {
            items: {
                '$ref': '#/components/schemas/SubmissionObservedInSomatic-Output'
            },
            title: 'Observed In',
            type: 'array'
        },
        oncogenicity_classification: {
            '$ref': '#/components/schemas/SomaticOncogenicityClassification-Output'
        },
        phase_unknown_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionPhaseUnknownSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        },
        record_status: {
            '$ref': '#/components/schemas/RecordStatus'
        },
        variant_set: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionVariantSet-Output'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    required: ['record_status', 'oncogenicity_classification', 'condition_set', 'observed_in'],
    title: 'SubmissionOncogenicitySubmission',
    type: 'object'
} as const;

export const SubmissionPhaseUnknownSet_InputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Input'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionPhaseUnknownSet',
    type: 'object'
} as const;

export const SubmissionPhaseUnknownSet_OutputSchema = {
    properties: {
        hgvs: {
            title: 'Hgvs',
            type: 'string'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Output'
            },
            title: 'Variants',
            type: 'array'
        }
    },
    required: ['hgvs', 'variants'],
    title: 'SubmissionPhaseUnknownSet',
    type: 'object'
} as const;

export const SubmissionStatus_InputSchema = {
    description: 'Internal submission status.',
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusActions-Input'
            },
            title: 'Actions',
            type: 'array'
        }
    },
    required: ['actions'],
    title: 'SubmissionStatus',
    type: 'object'
} as const;

export const SubmissionStatus_OutputSchema = {
    description: 'Internal submission status.',
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusActions-Output'
            },
            title: 'Actions',
            type: 'array'
        }
    },
    required: ['actions'],
    title: 'SubmissionStatus',
    type: 'object'
} as const;

export const SubmissionStatusActions_InputSchema = {
    properties: {
        id: {
            title: 'Id',
            type: 'string'
        },
        responses: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusResponse-Input'
            },
            title: 'Responses',
            type: 'array'
        },
        status: {
            title: 'Status',
            type: 'string'
        },
        target_db: {
            title: 'Target Db',
            type: 'string'
        },
        updated: {
            format: 'date-time',
            title: 'Updated',
            type: 'string'
        }
    },
    required: ['id', 'responses', 'status', 'target_db', 'updated'],
    title: 'SubmissionStatusActions',
    type: 'object'
} as const;

export const SubmissionStatusActions_OutputSchema = {
    properties: {
        id: {
            title: 'Id',
            type: 'string'
        },
        responses: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusResponse-Output'
            },
            title: 'Responses',
            type: 'array'
        },
        status: {
            title: 'Status',
            type: 'string'
        },
        target_db: {
            title: 'Target Db',
            type: 'string'
        },
        updated: {
            format: 'date-time',
            title: 'Updated',
            type: 'string'
        }
    },
    required: ['id', 'responses', 'status', 'target_db', 'updated'],
    title: 'SubmissionStatusActions',
    type: 'object'
} as const;

export const SubmissionStatusFileSchema = {
    properties: {
        url: {
            title: 'Url',
            type: 'string'
        }
    },
    required: ['url'],
    title: 'SubmissionStatusFile',
    type: 'object'
} as const;

export const SubmissionStatusObjectSchema = {
    properties: {
        accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Accession'
        },
        content: {
            '$ref': '#/components/schemas/SubmissionStatusObjectContent'
        },
        target_db: {
            title: 'Target Db',
            type: 'string'
        }
    },
    required: ['accession', 'content', 'target_db'],
    title: 'SubmissionStatusObject',
    type: 'object'
} as const;

export const SubmissionStatusObjectContentSchema = {
    properties: {
        clinvar_processing_status: {
            title: 'Clinvar Processing Status',
            type: 'string'
        },
        clinvar_release_status: {
            title: 'Clinvar Release Status',
            type: 'string'
        }
    },
    required: ['clinvar_processing_status', 'clinvar_release_status'],
    title: 'SubmissionStatusObjectContent',
    type: 'object'
} as const;

export const SubmissionStatusResponse_InputSchema = {
    properties: {
        files: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusFile'
            },
            title: 'Files',
            type: 'array'
        },
        message: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionStatusResponseMessage'
                },
                {
                    type: 'null'
                }
            ]
        },
        objects: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusObject'
            },
            title: 'Objects',
            type: 'array'
        },
        status: {
            title: 'Status',
            type: 'string'
        }
    },
    required: ['status', 'files', 'message', 'objects'],
    title: 'SubmissionStatusResponse',
    type: 'object'
} as const;

export const SubmissionStatusResponse_OutputSchema = {
    properties: {
        files: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusFile'
            },
            title: 'Files',
            type: 'array'
        },
        message: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionStatusResponseMessage'
                },
                {
                    type: 'null'
                }
            ]
        },
        objects: {
            items: {
                '$ref': '#/components/schemas/SubmissionStatusObject'
            },
            title: 'Objects',
            type: 'array'
        },
        status: {
            title: 'Status',
            type: 'string'
        }
    },
    required: ['status', 'files', 'message', 'objects'],
    title: 'SubmissionStatusResponse',
    type: 'object'
} as const;

export const SubmissionStatusResponseMessageSchema = {
    properties: {
        error_code: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ErrorCode'
                },
                {
                    type: 'null'
                }
            ]
        },
        severity: {
            title: 'Severity',
            type: 'string'
        },
        text: {
            title: 'Text',
            type: 'string'
        }
    },
    required: ['error_code', 'severity', 'text'],
    title: 'SubmissionStatusResponseMessage',
    type: 'object'
} as const;

export const SubmissionThreadCreateSchema = {
    properties: {
        desired_presence: {
            '$ref': '#/components/schemas/VariantPresence'
        },
        effective_presence: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariantPresence'
                },
                {
                    type: 'null'
                }
            ]
        },
        effective_scv: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effective Scv'
        },
        primary_variant_desc: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$|^(DEL|DUP)-(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-(\\d+)$',
            title: 'Primary Variant Desc',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionThreadStatus'
        },
        submittingorg_id: {
            format: 'uuid',
            title: 'Submittingorg Id',
            type: 'string'
        }
    },
    required: ['desired_presence', 'status', 'submittingorg_id', 'primary_variant_desc'],
    title: 'SubmissionThreadCreate',
    type: 'object'
} as const;

export const SubmissionThreadReadSchema = {
    properties: {
        created: {
            format: 'date-time',
            title: 'Created',
            type: 'string'
        },
        desired_presence: {
            '$ref': '#/components/schemas/VariantPresence'
        },
        effective_presence: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariantPresence'
                },
                {
                    type: 'null'
                }
            ]
        },
        effective_scv: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effective Scv'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        primary_variant_desc: {
            minLength: 1,
            pattern: '^(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-([CGAT]+)-([CGAT]+)$|^(DEL|DUP)-(grch37|grch38)-([1-9]|1[0-9]|2[12]|X|Y|MT)-(\\d+)-(\\d+)$',
            title: 'Primary Variant Desc',
            type: 'string'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionThreadStatus'
        },
        submittingorg_id: {
            format: 'uuid',
            title: 'Submittingorg Id',
            type: 'string'
        },
        updated: {
            format: 'date-time',
            title: 'Updated',
            type: 'string'
        }
    },
    required: ['desired_presence', 'status', 'id', 'created', 'updated', 'submittingorg_id', 'primary_variant_desc'],
    title: 'SubmissionThreadRead',
    type: 'object'
} as const;

export const SubmissionThreadStatusSchema = {
    description: `Status of a :ref:\`SubmissionThread\`.

A thread starts out being in initial state while being edit by the
user.  It is then submitted into the work queue together with an
initial activity where it is waiting to be processed.  It is then
worked on in the form of activities and ends up being complete or
failed.  If the latest activity runs into a timeout (e.g., worker
death) then this is reflected on the thread as well.`,
    enum: ['initial', 'waiting', 'in_progress', 'success', 'failed'],
    title: 'SubmissionThreadStatus',
    type: 'string'
} as const;

export const SubmissionThreadUpdateSchema = {
    properties: {
        desired_presence: {
            '$ref': '#/components/schemas/VariantPresence'
        },
        effective_presence: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariantPresence'
                },
                {
                    type: 'null'
                }
            ]
        },
        effective_scv: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Effective Scv'
        },
        status: {
            '$ref': '#/components/schemas/SubmissionThreadStatus'
        }
    },
    required: ['desired_presence', 'status'],
    title: 'SubmissionThreadUpdate',
    type: 'object'
} as const;

export const SubmissionVariant_InputSchema = {
    properties: {
        chromosome_coordinates: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionChromosomeCoordinates'
                },
                {
                    type: 'null'
                }
            ]
        },
        copy_number: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Copy Number'
        },
        gene: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionVariantGene'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gene'
        },
        hgvs: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hgvs'
        },
        reference_copy_number: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Copy Number'
        },
        variant_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariantType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionVariant',
    type: 'object'
} as const;

export const SubmissionVariant_OutputSchema = {
    properties: {
        chromosome_coordinates: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubmissionChromosomeCoordinates'
                },
                {
                    type: 'null'
                }
            ]
        },
        copy_number: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Copy Number'
        },
        gene: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubmissionVariantGene'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gene'
        },
        hgvs: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hgvs'
        },
        reference_copy_number: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reference Copy Number'
        },
        variant_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/VariantType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    title: 'SubmissionVariant',
    type: 'object'
} as const;

export const SubmissionVariantGeneSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        symbol: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Symbol'
        }
    },
    title: 'SubmissionVariantGene',
    type: 'object'
} as const;

export const SubmissionVariantSet_InputSchema = {
    properties: {
        variant: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Input'
            },
            title: 'Variant',
            type: 'array'
        }
    },
    required: ['variant'],
    title: 'SubmissionVariantSet',
    type: 'object'
} as const;

export const SubmissionVariantSet_OutputSchema = {
    properties: {
        variant: {
            items: {
                '$ref': '#/components/schemas/SubmissionVariant-Output'
            },
            title: 'Variant',
            type: 'array'
        }
    },
    required: ['variant'],
    title: 'SubmissionVariantSet',
    type: 'object'
} as const;

export const SubmittingOrgCreateSchema = {
    properties: {
        clinvar_api_token: {
            title: 'Clinvar Api Token',
            type: 'string'
        },
        label: {
            title: 'Label',
            type: 'string'
        },
        owner: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Owner'
        }
    },
    required: ['label', 'clinvar_api_token'],
    title: 'SubmittingOrgCreate',
    type: 'object'
} as const;

export const SubmittingOrgReadSchema = {
    properties: {
        created: {
            format: 'date-time',
            title: 'Created',
            type: 'string'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        label: {
            title: 'Label',
            type: 'string'
        },
        owner: {
            format: 'uuid',
            title: 'Owner',
            type: 'string'
        },
        updated: {
            format: 'date-time',
            title: 'Updated',
            type: 'string'
        }
    },
    required: ['owner', 'label', 'id', 'created', 'updated'],
    title: 'SubmittingOrgRead',
    type: 'object'
} as const;

export const SubmittingOrgUpdateSchema = {
    properties: {
        clinvar_api_token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Api Token'
        },
        label: {
            title: 'Label',
            type: 'string'
        },
        owner: {
            anyOf: [
                {
                    format: 'uuid',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Owner'
        }
    },
    required: ['label'],
    title: 'SubmittingOrgUpdate',
    type: 'object'
} as const;

export const SummaryResponse_InputSchema = {
    description: "Represetation of server's response to a submission.",
    properties: {
        batch_processing_status: {
            '$ref': '#/components/schemas/BatchProcessingStatus'
        },
        batch_release_status: {
            '$ref': '#/components/schemas/BatchReleaseStatus'
        },
        deletions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseDeletion-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletions'
        },
        submission_date: {
            title: 'Submission Date',
            type: 'string'
        },
        submission_name: {
            title: 'Submission Name',
            type: 'string'
        },
        submissions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseSubmission-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Submissions'
        },
        total_count: {
            title: 'Total Count',
            type: 'integer'
        },
        total_delete_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Count'
        },
        total_delete_errors: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Errors'
        },
        total_delete_success: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Success'
        },
        total_deleted: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Deleted'
        },
        total_errors: {
            title: 'Total Errors',
            type: 'integer'
        },
        total_public: {
            title: 'Total Public',
            type: 'integer'
        },
        total_success: {
            title: 'Total Success',
            type: 'integer'
        }
    },
    required: ['batch_processing_status', 'batch_release_status', 'submission_date', 'submission_name', 'total_count', 'total_errors', 'total_public', 'total_success'],
    title: 'SummaryResponse',
    type: 'object'
} as const;

export const SummaryResponse_OutputSchema = {
    description: "Represetation of server's response to a submission.",
    properties: {
        batch_processing_status: {
            '$ref': '#/components/schemas/BatchProcessingStatus'
        },
        batch_release_status: {
            '$ref': '#/components/schemas/BatchReleaseStatus'
        },
        deletions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseDeletion-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deletions'
        },
        submission_date: {
            title: 'Submission Date',
            type: 'string'
        },
        submission_name: {
            title: 'Submission Name',
            type: 'string'
        },
        submissions: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseSubmission-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Submissions'
        },
        total_count: {
            title: 'Total Count',
            type: 'integer'
        },
        total_delete_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Count'
        },
        total_delete_errors: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Errors'
        },
        total_delete_success: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Delete Success'
        },
        total_deleted: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Deleted'
        },
        total_errors: {
            title: 'Total Errors',
            type: 'integer'
        },
        total_public: {
            title: 'Total Public',
            type: 'integer'
        },
        total_success: {
            title: 'Total Success',
            type: 'integer'
        }
    },
    required: ['batch_processing_status', 'batch_release_status', 'submission_date', 'submission_name', 'total_count', 'total_errors', 'total_public', 'total_success'],
    title: 'SummaryResponse',
    type: 'object'
} as const;

export const SummaryResponseDeletion_InputSchema = {
    properties: {
        delete_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delete Date'
        },
        delete_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delete Status'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseError-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        },
        identifiers: {
            '$ref': '#/components/schemas/SummaryResponseDeletionIdentifier'
        },
        processing_status: {
            title: 'Processing Status',
            type: 'string'
        }
    },
    required: ['identifiers', 'processing_status'],
    title: 'SummaryResponseDeletion',
    type: 'object'
} as const;

export const SummaryResponseDeletion_OutputSchema = {
    properties: {
        delete_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delete Date'
        },
        delete_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delete Status'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseError-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        },
        identifiers: {
            '$ref': '#/components/schemas/SummaryResponseDeletionIdentifier'
        },
        processing_status: {
            title: 'Processing Status',
            type: 'string'
        }
    },
    required: ['identifiers', 'processing_status'],
    title: 'SummaryResponseDeletion',
    type: 'object'
} as const;

export const SummaryResponseDeletionIdentifierSchema = {
    properties: {
        clinvar_accession: {
            title: 'Clinvar Accession',
            type: 'string'
        },
        clinvar_local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Local Key'
        }
    },
    required: ['clinvar_accession'],
    title: 'SummaryResponseDeletionIdentifier',
    type: 'object'
} as const;

export const SummaryResponseError_InputSchema = {
    properties: {
        input: {
            items: {
                '$ref': '#/components/schemas/SummaryResponseErrorInput'
            },
            title: 'Input',
            type: 'array'
        },
        output: {
            '$ref': '#/components/schemas/SummaryResponseErrorOutput'
        }
    },
    required: ['input', 'output'],
    title: 'SummaryResponseError',
    type: 'object'
} as const;

export const SummaryResponseError_OutputSchema = {
    properties: {
        input: {
            items: {
                '$ref': '#/components/schemas/SummaryResponseErrorInput'
            },
            title: 'Input',
            type: 'array'
        },
        output: {
            '$ref': '#/components/schemas/SummaryResponseErrorOutput'
        }
    },
    required: ['input', 'output'],
    title: 'SummaryResponseError',
    type: 'object'
} as const;

export const SummaryResponseErrorInputSchema = {
    properties: {
        field: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Field'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        }
    },
    title: 'SummaryResponseErrorInput',
    type: 'object'
} as const;

export const SummaryResponseErrorOutputSchema = {
    properties: {
        errors: {
            items: {
                '$ref': '#/components/schemas/SummaryResponseErrorOutputError'
            },
            title: 'Errors',
            type: 'array'
        }
    },
    required: ['errors'],
    title: 'SummaryResponseErrorOutput',
    type: 'object'
} as const;

export const SummaryResponseErrorOutputErrorSchema = {
    properties: {
        user_message: {
            title: 'User Message',
            type: 'string'
        }
    },
    required: ['user_message'],
    title: 'SummaryResponseErrorOutputError',
    type: 'object'
} as const;

export const SummaryResponseSubmission_InputSchema = {
    properties: {
        clinvar_accession_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession Version'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseError-Input'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        },
        identifiers: {
            '$ref': '#/components/schemas/SummaryResponseSubmissionIdentifiers'
        },
        processing_status: {
            title: 'Processing Status',
            type: 'string'
        },
        release_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Date'
        },
        release_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Status'
        }
    },
    required: ['identifiers', 'processing_status'],
    title: 'SummaryResponseSubmission',
    type: 'object'
} as const;

export const SummaryResponseSubmission_OutputSchema = {
    properties: {
        clinvar_accession_version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession Version'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SummaryResponseError-Output'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        },
        identifiers: {
            '$ref': '#/components/schemas/SummaryResponseSubmissionIdentifiers'
        },
        processing_status: {
            title: 'Processing Status',
            type: 'string'
        },
        release_date: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Date'
        },
        release_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Status'
        }
    },
    required: ['identifiers', 'processing_status'],
    title: 'SummaryResponseSubmission',
    type: 'object'
} as const;

export const SummaryResponseSubmissionIdentifiersSchema = {
    properties: {
        clinvar_accession: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Clinvar Accession'
        },
        clinvar_local_key: {
            title: 'Clinvar Local Key',
            type: 'string'
        },
        local_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Id'
        },
        local_key: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Local Key'
        }
    },
    required: ['clinvar_local_key'],
    title: 'SummaryResponseSubmissionIdentifiers',
    type: 'object'
} as const;

export const TotalCursorPage_SubmissionActivityRead_Schema = {
    properties: {
        current_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page',
            title: 'Current Page'
        },
        current_page_backwards: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page starting from the last item',
            title: 'Current Page Backwards'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/SubmissionActivityRead'
            },
            title: 'Items',
            type: 'array'
        },
        next_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the next page',
            title: 'Next Page'
        },
        previous_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the previous page',
            title: 'Previous Page'
        },
        total: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Total items',
            title: 'Total'
        }
    },
    required: ['items'],
    title: 'TotalCursorPage[SubmissionActivityRead]',
    type: 'object'
} as const;

export const TotalCursorPage_SubmissionThreadRead_Schema = {
    properties: {
        current_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page',
            title: 'Current Page'
        },
        current_page_backwards: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page starting from the last item',
            title: 'Current Page Backwards'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/SubmissionThreadRead'
            },
            title: 'Items',
            type: 'array'
        },
        next_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the next page',
            title: 'Next Page'
        },
        previous_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the previous page',
            title: 'Previous Page'
        },
        total: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Total items',
            title: 'Total'
        }
    },
    required: ['items'],
    title: 'TotalCursorPage[SubmissionThreadRead]',
    type: 'object'
} as const;

export const TotalCursorPage_SubmittingOrgRead_Schema = {
    properties: {
        current_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page',
            title: 'Current Page'
        },
        current_page_backwards: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor to refetch the current page starting from the last item',
            title: 'Current Page Backwards'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/SubmittingOrgRead'
            },
            title: 'Items',
            type: 'array'
        },
        next_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the next page',
            title: 'Next Page'
        },
        previous_page: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Cursor for the previous page',
            title: 'Previous Page'
        },
        total: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Total items',
            title: 'Total'
        }
    },
    required: ['items'],
    title: 'TotalCursorPage[SubmittingOrgRead]',
    type: 'object'
} as const;

export const UserReadSchema = {
    description: `Model to use for reading users.

We expose the public OAuth account information.`,
    properties: {
        email: {
            format: 'email',
            title: 'Email',
            type: 'string'
        },
        id: {
            format: 'uuid',
            title: 'Id',
            type: 'string'
        },
        is_active: {
            default: true,
            title: 'Is Active',
            type: 'boolean'
        },
        is_superuser: {
            default: false,
            title: 'Is Superuser',
            type: 'boolean'
        },
        is_verified: {
            default: false,
            title: 'Is Verified',
            type: 'boolean'
        },
        oauth_accounts: {
            default: [],
            items: {
                '$ref': '#/components/schemas/PublicOAuthAccount'
            },
            title: 'Oauth Accounts',
            type: 'array'
        }
    },
    required: ['id', 'email'],
    title: 'UserRead',
    type: 'object'
} as const;

export const UserUpdateSchema = {
    description: `Model to use for updateing users.

We expose the public OAuth account information.`,
    properties: {
        email: {
            anyOf: [
                {
                    format: 'email',
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified'
        },
        oauth_accounts: {
            default: [],
            items: {
                '$ref': '#/components/schemas/PublicOAuthAccount'
            },
            title: 'Oauth Accounts',
            type: 'array'
        },
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    title: 'UserUpdate',
    type: 'object'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            title: 'Location',
            type: 'array'
        },
        msg: {
            title: 'Message',
            type: 'string'
        },
        type: {
            title: 'Error Type',
            type: 'string'
        }
    },
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError',
    type: 'object'
} as const;

export const VariantPresenceSchema = {
    description: 'Status of a variant in ClinVar.',
    enum: ['absent', 'present'],
    title: 'VariantPresence',
    type: 'string'
} as const;

export const VariantTypeSchema = {
    enum: ['Insertion', 'Deletion', 'Duplication', 'Tandem duplication', 'copy number loss', 'copy number gain', 'Inversion', 'Translocation', 'Complex'],
    title: 'VariantType',
    type: 'string'
} as const;

export const ZygositySchema = {
    enum: ['GENO:0000135', 'NCIT:C45826', 'NCIT:C198518', 'reev:unknown_zygosity'],
    title: 'Zygosity',
    type: 'string'
} as const;