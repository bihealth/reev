// This file is auto-generated by @hey-api/openapi-ts

export type AcmgRank_Input = {
    comment: string;
    criterias: Array<SeqVarCriteria>;
};

export type AcmgRank_Output = {
    comment: string;
    criterias: Array<SeqVarCriteria>;
};

export type AcmgSeqVarCreate_Input = {
    acmg_rank: AcmgRank_Input;
    seqvar_name: string;
    user?: (string | null);
};

export type AcmgSeqVarCreate_Output = {
    acmg_rank: AcmgRank_Output;
    seqvar_name: string;
    user?: (string | null);
};

export type AcmgSeqVarRead = {
    acmg_rank: AcmgRank_Output;
    id: string;
    seqvar_name: string;
    user?: (string | null);
};

export type AcmgSeqVarUpdate = {
    acmg_rank: AcmgRank_Input;
    seqvar_name: string;
    user?: (string | null);
};

export type AdminMessageRead = {
    active_start?: (string | null);
    active_stop?: (string | null);
    enabled?: (boolean | null);
    id: string;
    text?: (string | null);
    title?: (string | null);
};

export type AffectedStatus = 'yes' | 'no' | 'unknown' | 'not provided' | 'not applicable';

export type AlleleOrigin = 'germline' | 'somatic' | 'de novo' | 'unknown' | 'inherited' | 'maternal' | 'paternal' | 'biparental' | 'not applicable';

export type Assembly = 'GRCh38' | 'hg38' | 'GRCh37' | 'hg19' | 'NCBI36' | 'hg18';

export type BatchProcessingStatus = 'In processing' | 'Success' | 'Error' | 'Partial success';

export type BatchReleaseStatus = 'Released' | 'Partial released' | 'Not released';

export type BearerResponse = {
    access_token: string;
    token_type: string;
};

export type Body_auth_bearer_login_api_v1_auth_bearer_login_post = {
    client_id?: (string | null);
    client_secret?: (string | null);
    grant_type?: (string | null);
    password: string;
    scope?: string;
    username: string;
};

export type Body_auth_cookie_login_api_v1_auth_cookie_login_post = {
    client_id?: (string | null);
    client_secret?: (string | null);
    grant_type?: (string | null);
    password: string;
    scope?: string;
    username: string;
};

export type Body_verify_request_token_api_v1_auth_request_verify_token_post = {
    email: string;
};

export type Body_verify_verify_api_v1_auth_verify_post = {
    token: string;
};

export type BookmarkCreate = {
    obj_id: string;
    obj_type: BookmarkTypes;
    user?: (string | null);
};

export type BookmarkRead = {
    id: string;
    obj_id: string;
    obj_type: BookmarkTypes;
    user?: (string | null);
};

export type BookmarkTypes = 'seqvar' | 'strucvar' | 'gene';

export type CaseInfoCreate = {
    affected_family_members?: (boolean | null);
    age_of_onset_month?: (number | null);
    diseases?: (Array<DiseaseTerm> | null);
    ethnicity?: Ethnicity;
    family_segregation?: (boolean | null);
    hpo_terms?: (Array<HpoTerm> | null);
    inheritance?: Inheritance;
    pseudonym?: (string | null);
    sex?: Sex;
    user?: (string | null);
    zygosity?: Zygosity;
};

export type CaseInfoRead = {
    affected_family_members?: (boolean | null);
    age_of_onset_month?: (number | null);
    diseases?: (Array<DiseaseTerm> | null);
    ethnicity?: Ethnicity;
    family_segregation?: (boolean | null);
    hpo_terms?: (Array<HpoTerm> | null);
    id: string;
    inheritance?: Inheritance;
    pseudonym?: (string | null);
    sex?: Sex;
    user?: (string | null);
    zygosity?: Zygosity;
};

export type CaseInfoUpdate = {
    affected_family_members?: (boolean | null);
    age_of_onset_month?: (number | null);
    diseases?: (Array<DiseaseTerm> | null);
    ethnicity?: Ethnicity;
    family_segregation?: (boolean | null);
    hpo_terms?: (Array<HpoTerm> | null);
    inheritance?: Inheritance;
    pseudonym?: (string | null);
    sex?: Sex;
    user?: (string | null);
    zygosity?: Zygosity;
};

export type Chromosome = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | '20' | '21' | '22' | 'X' | 'Y' | 'MT';

/**
 * Allowed values for a citation's `db` field.
 *
 * The values of the enumeration map to the values used by the ClinVar submission API.
 */
export type CitationDb = 'PubMed' | 'BookShelf' | 'DOI' | 'pmc';

export type ClinicalFeaturesAffectedStatus = 'present' | 'absent' | 'not tested';

export type ClinicalFeaturesDb = 'HP';

/**
 * Allowed values for the ``clinicalSignificanceDescription`` and
 * ``germlineClassificationDescription``.
 *
 * The values of the enumeration map to the values used by the ClinVar submission API.
 */
export type ClinicalSignificanceDescription = 'Pathogenic' | 'Likely pathogenic' | 'Uncertain significance' | 'Likely benign' | 'Benign' | 'Pathogenic, low penetrance' | 'Uncertain risk allele' | 'Likely pathogenic, low penetrance' | 'Established risk allele' | 'Likely risk allele' | 'affects' | 'association' | 'drug response' | 'confers sensitivity' | 'protective' | 'other' | 'not provided';

export type CollectionMethod = 'curation' | 'literature only' | 'reference population' | 'provider interpretation' | 'phenotyping only' | 'case-control' | 'clinical testing' | 'in vitro' | 'in vivo' | 'research' | 'not provided';

export type ConditionDb = 'OMIM' | 'MedGen' | 'Orphanet' | 'MeSH' | 'HP' | 'MONDO';

export type Created = {
    id: string;
};

export type Criteria = 'PVS1' | 'PS1' | 'PS2' | 'PS3' | 'PS4' | 'PM1' | 'PM2' | 'PM3' | 'PM4' | 'PM5' | 'PM6' | 'PP1' | 'PP2' | 'PP3' | 'PP4' | 'BA1' | 'BS1' | 'BS2' | 'BS3' | 'BS4' | 'BP1' | 'BP2' | 'BP3' | 'BP4' | 'BP5' | 'BP7';

export type DiseaseTerm = {
    name: string;
    omimId: string;
};

export type ErrorCode = '0' | '1' | '2';

export type ErrorModel = {
    detail: (string | {
    [key: string]: (string);
});
};

export type Ethnicity = 'NCIT:C128937' | 'NCIT:C17950' | 'NCIT:C161419' | 'NCIT:C43865' | 'NCIT:C43851' | 'NCIT:C17459' | 'NCIT:C43866' | 'NCIT:C41263' | 'NCIT:C104495' | 'reev:unknown_ethnicity';

export type Evidence = 'Pathogenic Very Strong' | 'Pathogenic Strong' | 'Pathogenic Moderate' | 'Pathogenic Supporting' | 'Benign Standalone' | 'Benign Strong' | 'Benign Supporting' | 'Not Set';

/**
 * Details of somatic clinical impact classification.
 */
export type GermlineClassification_Input = {
    citation?: (Array<SubmissionCitation> | null);
    comment?: (string | null);
    custom_classification_score?: (number | null);
    date_last_evaluated?: (string | null);
    explanation_of_drug_response?: (string | null);
    explanation_of_other_classification?: (string | null);
    germline_classification_description: ClinicalSignificanceDescription;
    mode_of_inheritance: ModeOfInheritance;
};

/**
 * Details of somatic clinical impact classification.
 */
export type GermlineClassification_Output = {
    citation?: (Array<SubmissionCitation> | null);
    comment?: (string | null);
    custom_classification_score?: (number | null);
    date_last_evaluated?: (string | null);
    explanation_of_drug_response?: (string | null);
    explanation_of_other_classification?: (string | null);
    germline_classification_description: ClinicalSignificanceDescription;
    mode_of_inheritance: ModeOfInheritance;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type HpoTerm = {
    name: string;
    termId: string;
};

export type Inheritance = 'NCIT:C94245' | 'NCIT:C94246' | 'NCIT:C94599' | 'NCIT:C93189' | 'NCIT:C94542' | 'NCIT:C94247' | 'reev:unknown_inheritance';

export type ModeOfInheritance = 'Autosomal dominant inheritance' | 'Autosomal recessive inheritance' | 'Mitochondrial inheritance' | 'Genetic anticipation' | 'Sporadic' | 'Sex-limited autosomal dominant' | 'Somatic mutation' | 'X-linked recessive inheritance' | 'X-linked dominant inheritance' | 'Y-linked inheritance' | 'Other' | 'X-linked inheritance' | 'Codominant' | 'Semidominant inheritance' | 'Autosomal unknown' | 'Autosomal dominant inheritance with maternal imprinting' | 'Autosomal dominant inheritance with paternal imprinting' | 'Multifactorial inheritance' | 'Unknown mechanism' | 'Oligogenic inheritance';

export type Msg = {
    msg: string;
};

export type MultipleConditionExplanation = 'Novel disease' | 'Uncertain' | 'Co-occurring';

/**
 * Information exposed via API.
 */
export type OAuth2ProviderPublic = {
    label: string;
    name: string;
};

export type OncogenicityClassificationDescription = 'Oncogenic' | 'Likely Oncogenic' | 'Benign';

export type Presence = 'Present' | 'Absent' | 'Unknown';

export type PresenceOfSomaticVariantInNormalTissue = 'present' | 'absent' | 'not tested';

/**
 * Public part of OAuth account model.
 */
export type PublicOAuthAccount = {
    account_email: string;
    account_id: string;
    id: unknown;
    oauth_name: string;
};

export type RecordStatus = 'novel' | 'update';

export type ReleaseStatus = 'public' | 'hold until published';

/**
 * A simple response message from ClinVar.
 *
 * This is used for storing the error messages from ClinVar.
 */
export type ResponseMessage = {
    text: string;
};

/**
 * Result type for ``retrieve_status`` function.
 */
export type RetrieveStatusResult_Input = {
    status: SubmissionStatus_Input;
    summaries: {
        [key: string]: SummaryResponse_Input;
    };
};

/**
 * Result type for ``retrieve_status`` function.
 */
export type RetrieveStatusResult_Output = {
    status: SubmissionStatus_Output;
    summaries: {
        [key: string]: SummaryResponse_Output;
    };
};

export type SeqVarCriteria = {
    criteria: Criteria;
    evidence: Evidence;
    presence: Presence;
    summary?: (string | null);
};

export type Sex = 'PATO:0000384' | 'PATO:0000383' | 'reev:unknown_sex';

export type SomaticClinicalImpactAssertionType = 'therapeutic: sensitivity/response' | 'therapeutic: resistance' | 'therapeutic: reduced sensitivity' | 'diagnostic: supports diagnosis' | 'diagnostic: excludes diagnosis' | 'prognostic: better outcome' | 'prognostic: poor outcome';

/**
 * Details of somatic clinical impact classification.
 */
export type SomaticClinicalImpactClassification_Input = {
    assertion_type_for_clinical_impact?: (SomaticClinicalImpactAssertionType | null);
    citation?: (Array<SubmissionCitation> | null);
    clinical_impact_classification_description: SomaticClinicalImpactClassificationDescription;
    comment?: (string | null);
    date_last_evaluated?: (string | null);
    drug_for_therapeutic_assertion?: (string | null);
};

/**
 * Details of somatic clinical impact classification.
 */
export type SomaticClinicalImpactClassification_Output = {
    assertion_type_for_clinical_impact?: (SomaticClinicalImpactAssertionType | null);
    citation?: (Array<SubmissionCitation> | null);
    clinical_impact_classification_description: SomaticClinicalImpactClassificationDescription;
    comment?: (string | null);
    date_last_evaluated?: (string | null);
    drug_for_therapeutic_assertion?: (string | null);
};

export type SomaticClinicalImpactClassificationDescription = 'Tier I - Strong' | 'Tier II - Potential' | 'Tier III - Unknown' | 'Tier IV - Benign/Likely benign';

/**
 * Details of somatic clinical impact classification.
 */
export type SomaticOncogenicityClassification_Input = {
    citation?: (Array<SubmissionCitation> | null);
    comment?: (string | null);
    date_last_evaluated?: (string | null);
    oncogenicity_classification_description: OncogenicityClassificationDescription;
};

/**
 * Details of somatic clinical impact classification.
 */
export type SomaticOncogenicityClassification_Output = {
    citation?: (Array<SubmissionCitation> | null);
    comment?: (string | null);
    date_last_evaluated?: (string | null);
    oncogenicity_classification_description: OncogenicityClassificationDescription;
};

export type StructVarMethodType = 'SNP array' | 'Oligo array' | 'Read depth' | 'Paired-end mapping' | 'One end anchored assembly' | 'Sequence alignment' | 'Optical mapping' | 'Curated,PCR';

export type SubmissionActivityCreate = {
    kind: SubmissionActivityKind;
    request_payload?: (SubmissionContainer_Input | null);
    request_timestamp?: (string | null);
    response_payload?: (ResponseMessage | Created | RetrieveStatusResult_Input | null);
    response_timestamp?: (string | null);
    status: SubmissionActivityStatus;
    submissionthread_id: string;
};

/**
 * Type of the :ref:`SubmissionActivity`.
 */
export type SubmissionActivityKind = 'create' | 'retrieve' | 'update' | 'delete';

export type SubmissionActivityRead = {
    created: string;
    id: string;
    kind: SubmissionActivityKind;
    request_payload?: (SubmissionContainer_Output | null);
    request_timestamp?: (string | null);
    response_payload?: (ResponseMessage | Created | RetrieveStatusResult_Output | null);
    response_timestamp?: (string | null);
    status: SubmissionActivityStatus;
    submissionthread_id: string;
};

/**
 * Status of a :ref:`SubmissionActivity`.
 *
 * An activity starts out waiting in the queue to be picked up by the
 * worker, goes on into being processed, and ends up being complete
 * or failed.  An activity can also end up being in a timeout state.
 */
export type SubmissionActivityStatus = 'initial' | 'waiting' | 'in_progress' | 'complete_success' | 'complete_failure' | 'complete_in_progress' | 'failed' | 'timeout';

export type SubmissionActivityUpdate = {
    kind: SubmissionActivityKind;
    request_payload?: (SubmissionContainer_Input | null);
    request_timestamp?: (string | null);
    response_payload?: (ResponseMessage | Created | RetrieveStatusResult_Input | null);
    response_timestamp?: (string | null);
    status: SubmissionActivityStatus;
};

export type SubmissionAssertionCriteria = {
    db?: (CitationDb | null);
    id?: (string | null);
    url?: (string | null);
};

export type SubmissionChromosomeCoordinates = {
    accession?: (string | null);
    alternate_allele?: (string | null);
    assembly?: (Assembly | null);
    chromosome?: (Chromosome | null);
    inner_start?: (number | null);
    inner_stop?: (number | null);
    outer_start?: (number | null);
    outer_stop?: (number | null);
    reference_allele?: (string | null);
    start?: (number | null);
    stop?: (number | null);
    variant_length?: (number | null);
};

export type SubmissionCitation = {
    db?: (CitationDb | null);
    id?: (string | null);
    url?: (string | null);
};

export type SubmissionClinicalFeature = {
    clinical_features_affected_status: ClinicalFeaturesAffectedStatus;
    db?: (ClinicalFeaturesDb | null);
    id?: (string | null);
    name?: (string | null);
};

export type SubmissionClinicalImpactSubmission_Input = {
    clinical_impact_classification: SomaticClinicalImpactClassification_Input;
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Input | null);
    condition_set: SubmissionConditionSetSomatic_Input;
    diplotype_set?: (SubmissionDiplotypeSet_Input | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Input | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Input | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Input | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInSomatic_Input>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Input | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Input | null);
};

export type SubmissionClinicalImpactSubmission_Output = {
    clinical_impact_classification: SomaticClinicalImpactClassification_Output;
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Output | null);
    condition_set: SubmissionConditionSetSomatic_Output;
    diplotype_set?: (SubmissionDiplotypeSet_Output | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Output | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Output | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Output | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInSomatic_Output>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Output | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Output | null);
};

export type SubmissionClinicalSignificance_Input = {
    citation?: (Array<SubmissionCitation> | null);
    clinical_significance_description: ClinicalSignificanceDescription;
    comment?: (string | null);
    custom_assertion_score?: (number | null);
    date_last_evaluated?: (string | null);
    explanation_of_drug_response?: (string | null);
    explanation_of_other_clinical_significance?: (string | null);
    mode_of_inheritance?: (ModeOfInheritance | null);
};

export type SubmissionClinicalSignificance_Output = {
    citation?: (Array<SubmissionCitation> | null);
    clinical_significance_description: ClinicalSignificanceDescription;
    comment?: (string | null);
    custom_assertion_score?: (number | null);
    date_last_evaluated?: (string | null);
    explanation_of_drug_response?: (string | null);
    explanation_of_other_clinical_significance?: (string | null);
    mode_of_inheritance?: (ModeOfInheritance | null);
};

export type SubmissionClinvarDeletion = {
    accession_set: Array<SubmissionClinvarDeletionAccessionSet>;
};

export type SubmissionClinvarDeletionAccessionSet = {
    accession: string;
    reason?: (string | null);
};

export type SubmissionClinvarSubmission_Input = {
    clinical_significance: SubmissionClinicalSignificance_Input;
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Input | null);
    condition_set: SubmissionConditionSetGermline_Input;
    diplotype_set?: (SubmissionDiplotypeSet_Input | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Input | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Input | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Input | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInGermline_Input>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Input | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Input | null);
};

export type SubmissionClinvarSubmission_Output = {
    clinical_significance: SubmissionClinicalSignificance_Output;
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Output | null);
    condition_set: SubmissionConditionSetGermline_Output;
    diplotype_set?: (SubmissionDiplotypeSet_Output | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Output | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Output | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Output | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInGermline_Output>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Output | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Output | null);
};

export type SubmissionCompoundHeterozygoteSet_Input = {
    hgvs: string;
    variant_sets: Array<SubmissionCompoundHeterozygoteSetVariantSet_Input>;
};

export type SubmissionCompoundHeterozygoteSet_Output = {
    hgvs: string;
    variant_sets: Array<SubmissionCompoundHeterozygoteSetVariantSet_Output>;
};

export type SubmissionCompoundHeterozygoteSetVariantSet_Input = {
    variant_set?: (SubmissionVariantSet_Input | null);
};

export type SubmissionCompoundHeterozygoteSetVariantSet_Output = {
    variant_set?: (SubmissionVariantSet_Output | null);
};

export type SubmissionCondition = {
    db?: (ConditionDb | null);
    id?: (string | null);
    name?: (string | null);
};

export type SubmissionConditionSetGermline_Input = {
    condition?: (Array<SubmissionCondition> | null);
    drug_response?: (Array<SubmissionDrugResponse_Input> | null);
    multiple_condition_explanation?: (MultipleConditionExplanation | null);
};

export type SubmissionConditionSetGermline_Output = {
    condition?: (Array<SubmissionCondition> | null);
    drug_response?: (Array<SubmissionDrugResponse_Output> | null);
    multiple_condition_explanation?: (MultipleConditionExplanation | null);
};

export type SubmissionConditionSetSomatic_Input = {
    condition: Array<SubmissionCondition>;
    drug_response?: (Array<SubmissionDrugResponse_Input> | null);
    multiple_condition_explanation?: (MultipleConditionExplanation | null);
};

export type SubmissionConditionSetSomatic_Output = {
    condition: Array<SubmissionCondition>;
    drug_response?: (Array<SubmissionDrugResponse_Output> | null);
    multiple_condition_explanation?: (MultipleConditionExplanation | null);
};

export type SubmissionContainer_Input = {
    assertion_criteria?: (SubmissionAssertionCriteria | null);
    behalf_org_id?: (number | null);
    clinical_impact_submission?: (Array<SubmissionClinicalImpactSubmission_Input> | null);
    clinvar_deletion?: (SubmissionClinvarDeletion | null);
    clinvar_submission?: (Array<SubmissionClinvarSubmission_Input> | null);
    clinvar_submission_release_status?: (ReleaseStatus | null);
    germline_submission?: (Array<SubmissionGermlineSubmission_Input> | null);
    oncogenicity_submission?: (Array<SubmissionOncogenicitySubmission_Input> | null);
    submission_name?: (string | null);
};

export type SubmissionContainer_Output = {
    assertion_criteria?: (SubmissionAssertionCriteria | null);
    behalf_org_id?: (number | null);
    clinical_impact_submission?: (Array<SubmissionClinicalImpactSubmission_Output> | null);
    clinvar_deletion?: (SubmissionClinvarDeletion | null);
    clinvar_submission?: (Array<SubmissionClinvarSubmission_Output> | null);
    clinvar_submission_release_status?: (ReleaseStatus | null);
    germline_submission?: (Array<SubmissionGermlineSubmission_Output> | null);
    oncogenicity_submission?: (Array<SubmissionOncogenicitySubmission_Output> | null);
    submission_name?: (string | null);
};

export type SubmissionDiplotypeSet_Input = {
    haplotype_sets: Array<SubmissionHaplotypeSets_Input>;
    hgvs: string;
    star_allele_name?: (string | null);
};

export type SubmissionDiplotypeSet_Output = {
    haplotype_sets: Array<SubmissionHaplotypeSets_Output>;
    hgvs: string;
    star_allele_name?: (string | null);
};

export type SubmissionDistinctChromosomesSet_Input = {
    hgvs: string;
    variants: Array<SubmissionVariant_Input>;
};

export type SubmissionDistinctChromosomesSet_Output = {
    hgvs: string;
    variants: Array<SubmissionVariant_Output>;
};

export type SubmissionDrugResponse_Input = {
    condition?: (Array<SubmissionCondition> | null);
    db?: (ConditionDb | null);
    drug_name?: (string | null);
    id?: (string | null);
};

export type SubmissionDrugResponse_Output = {
    condition?: (Array<SubmissionCondition> | null);
    db?: (ConditionDb | null);
    drug_name?: (string | null);
    id?: (string | null);
};

export type SubmissionGermlineSubmission_Input = {
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Input | null);
    condition_set: SubmissionConditionSetGermline_Input;
    diplotype_set?: (SubmissionDiplotypeSet_Input | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Input | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    germline_classification: GermlineClassification_Input;
    haplotype_set?: (SubmissionHaplotypeSet_Input | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Input | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInGermline_Input>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Input | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Input | null);
};

export type SubmissionGermlineSubmission_Output = {
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Output | null);
    condition_set: SubmissionConditionSetGermline_Output;
    diplotype_set?: (SubmissionDiplotypeSet_Output | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Output | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    germline_classification: GermlineClassification_Output;
    haplotype_set?: (SubmissionHaplotypeSet_Output | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Output | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInGermline_Output>;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Output | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Output | null);
};

export type SubmissionHaplotypeSet_Input = {
    hgvs: string;
    star_allele_name?: (string | null);
    variants: Array<SubmissionVariant_Input>;
};

export type SubmissionHaplotypeSet_Output = {
    hgvs: string;
    star_allele_name?: (string | null);
    variants: Array<SubmissionVariant_Output>;
};

export type SubmissionHaplotypeSets_Input = {
    haplotype_set?: (SubmissionHaplotypeSet_Input | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Input | null);
};

export type SubmissionHaplotypeSets_Output = {
    haplotype_set?: (SubmissionHaplotypeSet_Output | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Output | null);
};

export type SubmissionObservedInGermline_Input = {
    affected_status: AffectedStatus;
    allele_origin: AlleleOrigin;
    clinical_features?: (Array<SubmissionClinicalFeature> | null);
    clinical_features_comment?: (string | null);
    collection_method: CollectionMethod;
    number_of_individuals?: (number | null);
    struct_var_method_type?: (StructVarMethodType | null);
};

export type SubmissionObservedInGermline_Output = {
    affected_status: AffectedStatus;
    allele_origin: AlleleOrigin;
    clinical_features?: (Array<SubmissionClinicalFeature> | null);
    clinical_features_comment?: (string | null);
    collection_method: CollectionMethod;
    number_of_individuals?: (number | null);
    struct_var_method_type?: (StructVarMethodType | null);
};

export type SubmissionObservedInSomatic_Input = {
    affected_status: AffectedStatus;
    allele_origin: AlleleOrigin;
    clinical_features?: (Array<SubmissionClinicalFeature> | null);
    clinical_features_comment?: (string | null);
    collection_method: CollectionMethod;
    number_of_individuals?: (number | null);
    presence_of_somatic_variant_in_normal_tissue?: (PresenceOfSomaticVariantInNormalTissue | null);
    somatic_variant_allele_fraction?: (number | null);
    struct_var_method_type?: (StructVarMethodType | null);
};

export type SubmissionObservedInSomatic_Output = {
    affected_status: AffectedStatus;
    allele_origin: AlleleOrigin;
    clinical_features?: (Array<SubmissionClinicalFeature> | null);
    clinical_features_comment?: (string | null);
    collection_method: CollectionMethod;
    number_of_individuals?: (number | null);
    presence_of_somatic_variant_in_normal_tissue?: (PresenceOfSomaticVariantInNormalTissue | null);
    somatic_variant_allele_fraction?: (number | null);
    struct_var_method_type?: (StructVarMethodType | null);
};

export type SubmissionOncogenicitySubmission_Input = {
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Input | null);
    condition_set: SubmissionConditionSetSomatic_Input;
    diplotype_set?: (SubmissionDiplotypeSet_Input | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Input | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Input | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Input | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInSomatic_Input>;
    oncogenicity_classification: SomaticOncogenicityClassification_Input;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Input | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Input | null);
};

export type SubmissionOncogenicitySubmission_Output = {
    clinvar_accession?: (string | null);
    compound_heterozygote_set?: (SubmissionCompoundHeterozygoteSet_Output | null);
    condition_set: SubmissionConditionSetSomatic_Output;
    diplotype_set?: (SubmissionDiplotypeSet_Output | null);
    distinct_chromosomes_set?: (SubmissionDistinctChromosomesSet_Output | null);
    extra_data?: ({
    [key: string]: unknown;
} | null);
    haplotype_set?: (SubmissionHaplotypeSet_Output | null);
    haplotype_single_variant_set?: (SubmissionHaplotypeSet_Output | null);
    local_id?: (string | null);
    local_key?: (string | null);
    observed_in: Array<SubmissionObservedInSomatic_Output>;
    oncogenicity_classification: SomaticOncogenicityClassification_Output;
    phase_unknown_set?: (SubmissionPhaseUnknownSet_Output | null);
    record_status: RecordStatus;
    variant_set?: (SubmissionVariantSet_Output | null);
};

export type SubmissionPhaseUnknownSet_Input = {
    hgvs: string;
    variants: Array<SubmissionVariant_Input>;
};

export type SubmissionPhaseUnknownSet_Output = {
    hgvs: string;
    variants: Array<SubmissionVariant_Output>;
};

/**
 * Internal submission status.
 */
export type SubmissionStatus_Input = {
    actions: Array<SubmissionStatusActions_Input>;
};

/**
 * Internal submission status.
 */
export type SubmissionStatus_Output = {
    actions: Array<SubmissionStatusActions_Output>;
};

export type SubmissionStatusActions_Input = {
    id: string;
    responses: Array<SubmissionStatusResponse_Input>;
    status: string;
    target_db: string;
    updated: string;
};

export type SubmissionStatusActions_Output = {
    id: string;
    responses: Array<SubmissionStatusResponse_Output>;
    status: string;
    target_db: string;
    updated: string;
};

export type SubmissionStatusFile = {
    url: string;
};

export type SubmissionStatusObject = {
    accession: (string | null);
    content: SubmissionStatusObjectContent;
    target_db: string;
};

export type SubmissionStatusObjectContent = {
    clinvar_processing_status: string;
    clinvar_release_status: string;
};

export type SubmissionStatusResponse_Input = {
    files: Array<SubmissionStatusFile>;
    message: (SubmissionStatusResponseMessage | null);
    objects: Array<SubmissionStatusObject>;
    status: string;
};

export type SubmissionStatusResponse_Output = {
    files: Array<SubmissionStatusFile>;
    message: (SubmissionStatusResponseMessage | null);
    objects: Array<SubmissionStatusObject>;
    status: string;
};

export type SubmissionStatusResponseMessage = {
    error_code: (ErrorCode | null);
    severity: string;
    text: string;
};

export type SubmissionThreadCreate = {
    desired_presence: VariantPresence;
    effective_presence?: (VariantPresence | null);
    effective_scv?: (string | null);
    primary_variant_desc: string;
    status: SubmissionThreadStatus;
    submittingorg_id: string;
};

export type SubmissionThreadRead = {
    created: string;
    desired_presence: VariantPresence;
    effective_presence?: (VariantPresence | null);
    effective_scv?: (string | null);
    id: string;
    primary_variant_desc: string;
    status: SubmissionThreadStatus;
    submittingorg_id: string;
    updated: string;
};

/**
 * Status of a :ref:`SubmissionThread`.
 *
 * A thread starts out being in initial state while being edit by the
 * user.  It is then submitted into the work queue together with an
 * initial activity where it is waiting to be processed.  It is then
 * worked on in the form of activities and ends up being complete or
 * failed.  If the latest activity runs into a timeout (e.g., worker
 * death) then this is reflected on the thread as well.
 */
export type SubmissionThreadStatus = 'initial' | 'waiting' | 'in_progress' | 'success' | 'failed';

export type SubmissionThreadUpdate = {
    desired_presence: VariantPresence;
    effective_presence?: (VariantPresence | null);
    effective_scv?: (string | null);
    status: SubmissionThreadStatus;
};

export type SubmissionVariant_Input = {
    chromosome_coordinates?: (SubmissionChromosomeCoordinates | null);
    copy_number?: (string | null);
    gene?: (Array<SubmissionVariantGene> | null);
    hgvs?: (string | null);
    reference_copy_number?: (number | null);
    variant_type?: (VariantType | null);
};

export type SubmissionVariant_Output = {
    chromosome_coordinates?: (SubmissionChromosomeCoordinates | null);
    copy_number?: (string | null);
    gene?: (Array<SubmissionVariantGene> | null);
    hgvs?: (string | null);
    reference_copy_number?: (number | null);
    variant_type?: (VariantType | null);
};

export type SubmissionVariantGene = {
    id?: (number | null);
    symbol?: (string | null);
};

export type SubmissionVariantSet_Input = {
    variant: Array<SubmissionVariant_Input>;
};

export type SubmissionVariantSet_Output = {
    variant: Array<SubmissionVariant_Output>;
};

export type SubmittingOrgCreate = {
    clinvar_api_token: string;
    label: string;
    owner?: (string | null);
};

export type SubmittingOrgRead = {
    created: string;
    id: string;
    label: string;
    owner: string;
    updated: string;
};

export type SubmittingOrgUpdate = {
    clinvar_api_token?: (string | null);
    label: string;
    owner?: (string | null);
};

/**
 * Represetation of server's response to a submission.
 */
export type SummaryResponse_Input = {
    batch_processing_status: BatchProcessingStatus;
    batch_release_status: BatchReleaseStatus;
    deletions?: (Array<SummaryResponseDeletion_Input> | null);
    submission_date: string;
    submission_name: string;
    submissions?: (Array<SummaryResponseSubmission_Input> | null);
    total_count: number;
    total_delete_count?: (number | null);
    total_delete_errors?: (number | null);
    total_delete_success?: (number | null);
    total_deleted?: (number | null);
    total_errors: number;
    total_public: number;
    total_success: number;
};

/**
 * Represetation of server's response to a submission.
 */
export type SummaryResponse_Output = {
    batch_processing_status: BatchProcessingStatus;
    batch_release_status: BatchReleaseStatus;
    deletions?: (Array<SummaryResponseDeletion_Output> | null);
    submission_date: string;
    submission_name: string;
    submissions?: (Array<SummaryResponseSubmission_Output> | null);
    total_count: number;
    total_delete_count?: (number | null);
    total_delete_errors?: (number | null);
    total_delete_success?: (number | null);
    total_deleted?: (number | null);
    total_errors: number;
    total_public: number;
    total_success: number;
};

export type SummaryResponseDeletion_Input = {
    delete_date?: (string | null);
    delete_status?: (string | null);
    errors?: (Array<SummaryResponseError_Input> | null);
    identifiers: SummaryResponseDeletionIdentifier;
    processing_status: string;
};

export type SummaryResponseDeletion_Output = {
    delete_date?: (string | null);
    delete_status?: (string | null);
    errors?: (Array<SummaryResponseError_Output> | null);
    identifiers: SummaryResponseDeletionIdentifier;
    processing_status: string;
};

export type SummaryResponseDeletionIdentifier = {
    clinvar_accession: string;
    clinvar_local_key?: (string | null);
};

export type SummaryResponseError_Input = {
    input: Array<SummaryResponseErrorInput>;
    output: SummaryResponseErrorOutput;
};

export type SummaryResponseError_Output = {
    input: Array<SummaryResponseErrorInput>;
    output: SummaryResponseErrorOutput;
};

export type SummaryResponseErrorInput = {
    field?: (string | null);
    value?: (string | null);
};

export type SummaryResponseErrorOutput = {
    errors: Array<SummaryResponseErrorOutputError>;
};

export type SummaryResponseErrorOutputError = {
    user_message: string;
};

export type SummaryResponseSubmission_Input = {
    clinvar_accession_version?: (string | null);
    errors?: (Array<SummaryResponseError_Input> | null);
    identifiers: SummaryResponseSubmissionIdentifiers;
    processing_status: string;
    release_date?: (string | null);
    release_status?: (string | null);
};

export type SummaryResponseSubmission_Output = {
    clinvar_accession_version?: (string | null);
    errors?: (Array<SummaryResponseError_Output> | null);
    identifiers: SummaryResponseSubmissionIdentifiers;
    processing_status: string;
    release_date?: (string | null);
    release_status?: (string | null);
};

export type SummaryResponseSubmissionIdentifiers = {
    clinvar_accession?: (string | null);
    clinvar_local_key: string;
    local_id?: (string | null);
    local_key?: (string | null);
};

export type TotalCursorPage_SubmissionActivityRead_ = {
    /**
     * Cursor to refetch the current page
     */
    current_page?: (string | null);
    /**
     * Cursor to refetch the current page starting from the last item
     */
    current_page_backwards?: (string | null);
    items: Array<SubmissionActivityRead>;
    /**
     * Cursor for the next page
     */
    next_page?: (string | null);
    /**
     * Cursor for the previous page
     */
    previous_page?: (string | null);
    /**
     * Total items
     */
    total?: (number | null);
};

export type TotalCursorPage_SubmissionThreadRead_ = {
    /**
     * Cursor to refetch the current page
     */
    current_page?: (string | null);
    /**
     * Cursor to refetch the current page starting from the last item
     */
    current_page_backwards?: (string | null);
    items: Array<SubmissionThreadRead>;
    /**
     * Cursor for the next page
     */
    next_page?: (string | null);
    /**
     * Cursor for the previous page
     */
    previous_page?: (string | null);
    /**
     * Total items
     */
    total?: (number | null);
};

export type TotalCursorPage_SubmittingOrgRead_ = {
    /**
     * Cursor to refetch the current page
     */
    current_page?: (string | null);
    /**
     * Cursor to refetch the current page starting from the last item
     */
    current_page_backwards?: (string | null);
    items: Array<SubmittingOrgRead>;
    /**
     * Cursor for the next page
     */
    next_page?: (string | null);
    /**
     * Cursor for the previous page
     */
    previous_page?: (string | null);
    /**
     * Total items
     */
    total?: (number | null);
};

/**
 * Model to use for reading users.
 *
 * We expose the public OAuth account information.
 */
export type UserRead = {
    email: string;
    id: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    oauth_accounts?: Array<PublicOAuthAccount>;
};

/**
 * Model to use for updateing users.
 *
 * We expose the public OAuth account information.
 */
export type UserUpdate = {
    email?: (string | null);
    is_active?: (boolean | null);
    is_superuser?: (boolean | null);
    is_verified?: (boolean | null);
    oauth_accounts?: Array<PublicOAuthAccount>;
    password?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

/**
 * Status of a variant in ClinVar.
 */
export type VariantPresence = 'absent' | 'present';

export type VariantType = 'Insertion' | 'Deletion' | 'Duplication' | 'Tandem duplication' | 'copy number loss' | 'copy number gain' | 'Inversion' | 'Translocation' | 'Complex';

export type Zygosity = 'GENO:0000135' | 'NCIT:C45826' | 'NCIT:C198518' | 'reev:unknown_zygosity';

export type CreateAcmgseqvarApiV1AcmgseqvarCreatePostData = {
    body: AcmgSeqVarCreate_Input;
};

export type CreateAcmgseqvarApiV1AcmgseqvarCreatePostResponse = (AcmgSeqVarCreate_Output);

export type CreateAcmgseqvarApiV1AcmgseqvarCreatePostError = (HTTPValidationError);

export type DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteData = {
    headers?: {
        'user-agent'?: (string | null);
    };
    query: {
        seqvar: string;
    };
};

export type DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteResponse = (AcmgSeqVarRead);

export type DeleteAcmgseqvarByUserApiV1AcmgseqvarDeleteDeleteError = (HTTPValidationError);

export type DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteData = {
    query: {
        id: string;
    };
};

export type DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteResponse = (AcmgSeqVarRead);

export type DeleteAcmgseqvarApiV1AcmgseqvarDeleteByIdDeleteError = (HTTPValidationError);

export type GetAcmgseqvarByUserApiV1AcmgseqvarGetGetData = {
    headers?: {
        'user-agent'?: (string | null);
    };
    query: {
        seqvar: string;
    };
};

export type GetAcmgseqvarByUserApiV1AcmgseqvarGetGetResponse = (AcmgSeqVarRead);

export type GetAcmgseqvarByUserApiV1AcmgseqvarGetGetError = (HTTPValidationError);

export type GetAcmgseqvarApiV1AcmgseqvarGetByIdGetData = {
    query: {
        id: string;
    };
};

export type GetAcmgseqvarApiV1AcmgseqvarGetByIdGetResponse = (AcmgSeqVarRead);

export type GetAcmgseqvarApiV1AcmgseqvarGetByIdGetError = (HTTPValidationError);

export type ListAcmgseqvarsByUserApiV1AcmgseqvarListGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ListAcmgseqvarsByUserApiV1AcmgseqvarListGetResponse = (Array<AcmgSeqVarRead>);

export type ListAcmgseqvarsByUserApiV1AcmgseqvarListGetError = (HTTPValidationError);

export type ListAcmgseqvarsApiV1AcmgseqvarListAllGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ListAcmgseqvarsApiV1AcmgseqvarListAllGetResponse = (Array<AcmgSeqVarRead>);

export type ListAcmgseqvarsApiV1AcmgseqvarListAllGetError = (HTTPValidationError);

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchData = {
    body: AcmgSeqVarUpdate;
};

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchResponse = (AcmgSeqVarRead);

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePatchError = (HTTPValidationError);

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutData = {
    body: AcmgSeqVarUpdate;
};

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutResponse = (AcmgSeqVarRead);

export type UpdateAcmgseqvarApiV1AcmgseqvarUpdatePutError = (HTTPValidationError);

export type ReadAdminmsgsApiV1AdminmsgsGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ReadAdminmsgsApiV1AdminmsgsGetResponse = (Array<AdminMessageRead>);

export type ReadAdminmsgsApiV1AdminmsgsGetError = (HTTPValidationError);

export type AuthBearerLoginApiV1AuthBearerLoginPostData = {
    body: Body_auth_bearer_login_api_v1_auth_bearer_login_post;
};

export type AuthBearerLoginApiV1AuthBearerLoginPostResponse = (BearerResponse);

export type AuthBearerLoginApiV1AuthBearerLoginPostError = (ErrorModel | HTTPValidationError);

export type AuthBearerLogoutApiV1AuthBearerLogoutPostResponse = (unknown);

export type AuthBearerLogoutApiV1AuthBearerLogoutPostError = (unknown);

export type AuthCookieLoginApiV1AuthCookieLoginPostData = {
    body: Body_auth_cookie_login_api_v1_auth_cookie_login_post;
};

export type AuthCookieLoginApiV1AuthCookieLoginPostResponse = (unknown | void);

export type AuthCookieLoginApiV1AuthCookieLoginPostError = (ErrorModel | HTTPValidationError);

export type AuthCookieLogoutApiV1AuthCookieLogoutPostResponse = (unknown | void);

export type AuthCookieLogoutApiV1AuthCookieLogoutPostError = (unknown);

export type ListOauth2ProvidersApiV1AuthOauth2ProvidersGetResponse = (Array<OAuth2ProviderPublic>);

export type ListOauth2ProvidersApiV1AuthOauth2ProvidersGetError = unknown;

export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData = {
    body: Body_verify_request_token_api_v1_auth_request_verify_token_post;
};

export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse = (unknown);

export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostError = (HTTPValidationError);

export type VerifyVerifyApiV1AuthVerifyPostData = {
    body: Body_verify_verify_api_v1_auth_verify_post;
};

export type VerifyVerifyApiV1AuthVerifyPostResponse = (UserRead);

export type VerifyVerifyApiV1AuthVerifyPostError = (ErrorModel | HTTPValidationError);

export type CreateBookmarkApiV1BookmarksCreatePostData = {
    body: BookmarkCreate;
};

export type CreateBookmarkApiV1BookmarksCreatePostResponse = (BookmarkCreate);

export type CreateBookmarkApiV1BookmarksCreatePostError = (HTTPValidationError);

export type DeleteBookmarkForUserApiV1BookmarksDeleteDeleteData = {
    headers?: {
        'user-agent'?: (string | null);
    };
    query: {
        obj_id: string;
        obj_type: string;
    };
};

export type DeleteBookmarkForUserApiV1BookmarksDeleteDeleteResponse = (BookmarkRead);

export type DeleteBookmarkForUserApiV1BookmarksDeleteDeleteError = (HTTPValidationError);

export type DeleteBookmarkApiV1BookmarksDeleteByIdDeleteData = {
    query: {
        id: string;
    };
};

export type DeleteBookmarkApiV1BookmarksDeleteByIdDeleteResponse = (BookmarkRead);

export type DeleteBookmarkApiV1BookmarksDeleteByIdDeleteError = (HTTPValidationError);

export type GetBookmarkForUserApiV1BookmarksGetGetData = {
    headers?: {
        'user-agent'?: (string | null);
    };
    query: {
        obj_id: string;
        obj_type: string;
    };
};

export type GetBookmarkForUserApiV1BookmarksGetGetResponse = (BookmarkRead);

export type GetBookmarkForUserApiV1BookmarksGetGetError = (HTTPValidationError);

export type GetBookmarkApiV1BookmarksGetByIdGetData = {
    query: {
        id: string;
    };
};

export type GetBookmarkApiV1BookmarksGetByIdGetResponse = (BookmarkRead);

export type GetBookmarkApiV1BookmarksGetByIdGetError = (HTTPValidationError);

export type ListBookmarksForUserApiV1BookmarksListGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ListBookmarksForUserApiV1BookmarksListGetResponse = (Array<BookmarkRead>);

export type ListBookmarksForUserApiV1BookmarksListGetError = (HTTPValidationError);

export type ListBookmarksApiV1BookmarksListAllGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ListBookmarksApiV1BookmarksListAllGetResponse = (Array<BookmarkRead>);

export type ListBookmarksApiV1BookmarksListAllGetError = (HTTPValidationError);

export type CreateCaseinfoApiV1CaseinfoCreatePostData = {
    body: CaseInfoCreate;
};

export type CreateCaseinfoApiV1CaseinfoCreatePostResponse = (CaseInfoCreate);

export type CreateCaseinfoApiV1CaseinfoCreatePostError = (HTTPValidationError);

export type DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteData = {
    headers?: {
        'user-agent'?: (string | null);
    };
};

export type DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteResponse = (CaseInfoRead);

export type DeleteCaseinfoForUserApiV1CaseinfoDeleteDeleteError = (HTTPValidationError);

export type DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteData = {
    query: {
        id: string;
    };
};

export type DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteResponse = (CaseInfoRead);

export type DeleteCaseinfoApiV1CaseinfoDeleteByIdDeleteError = (HTTPValidationError);

export type GetCaseinfoForUserApiV1CaseinfoGetGetData = {
    headers?: {
        'user-agent'?: (string | null);
    };
};

export type GetCaseinfoForUserApiV1CaseinfoGetGetResponse = (CaseInfoRead);

export type GetCaseinfoForUserApiV1CaseinfoGetGetError = (HTTPValidationError);

export type GetCaseinfoApiV1CaseinfoGetByIdGetData = {
    query: {
        id: string;
    };
};

export type GetCaseinfoApiV1CaseinfoGetByIdGetResponse = (CaseInfoRead);

export type GetCaseinfoApiV1CaseinfoGetByIdGetError = (HTTPValidationError);

export type ListCaseinfosForUserApiV1CaseinfoListGetResponse = (Array<CaseInfoRead>);

export type ListCaseinfosForUserApiV1CaseinfoListGetError = unknown;

export type ListCaseinfosApiV1CaseinfoListAllGetData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type ListCaseinfosApiV1CaseinfoListAllGetResponse = (Array<CaseInfoRead>);

export type ListCaseinfosApiV1CaseinfoListAllGetError = (HTTPValidationError);

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchData = {
    body: CaseInfoUpdate;
    headers?: {
        'user-agent'?: (string | null);
    };
};

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchResponse = (CaseInfoRead);

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePatchError = (HTTPValidationError);

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePutData = {
    body: CaseInfoUpdate;
    headers?: {
        'user-agent'?: (string | null);
    };
};

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePutResponse = (CaseInfoRead);

export type UpdateCaseinfoForUserApiV1CaseinfoUpdatePutError = (HTTPValidationError);

export type UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutData = {
    body: SubmissionActivityUpdate;
    path: {
        submissionactivity_id: string;
    };
};

export type UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutResponse = (SubmissionActivityRead);

export type UpdateSubmissionactivityApiV1ClinvarsubSubmissionactivitiesSubmissionactivityIdPutError = (HTTPValidationError);

export type ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetData = {
    query?: {
        /**
         * Cursor for the next page
         */
        cursor?: (string | null);
        primary_variant_desc?: (string | null);
        /**
         * Page size
         */
        size?: number;
    };
};

export type ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetResponse = (TotalCursorPage_SubmissionThreadRead_);

export type ListSubmissionthreadsApiV1ClinvarsubSubmissionthreadsGetError = (HTTPValidationError);

export type CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostData = {
    body: SubmissionThreadCreate;
};

export type CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostResponse = (SubmissionThreadRead);

export type CreateSubmissionthreadApiV1ClinvarsubSubmissionthreadsPostError = (HTTPValidationError);

export type DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteData = {
    path: {
        submissionthread_id: string;
    };
};

export type DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteResponse = (SubmissionThreadRead);

export type DeleteSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdDeleteError = (HTTPValidationError);

export type GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetData = {
    path: {
        submissionthread_id: string;
    };
};

export type GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetResponse = (SubmissionThreadRead);

export type GetSubmissionthreadByIdApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdGetError = (HTTPValidationError);

export type UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutData = {
    body: SubmissionThreadUpdate;
    path: {
        submissionthread_id: string;
    };
};

export type UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutResponse = (SubmissionThreadRead);

export type UpdateSubmissionthreadApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdPutError = (HTTPValidationError);

export type ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetData = {
    path: {
        submissionthread_id: string;
    };
    query?: {
        /**
         * Cursor for the next page
         */
        cursor?: (string | null);
        /**
         * Page size
         */
        size?: number;
    };
};

export type ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetResponse = (TotalCursorPage_SubmissionActivityRead_);

export type ListSubmissionactivitiesApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesGetError = (HTTPValidationError);

export type CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostData = {
    body: SubmissionActivityCreate;
    path: {
        submissionthread_id: string;
    };
};

export type CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostResponse = (SubmissionActivityRead);

export type CreateSubmissionactivityApiV1ClinvarsubSubmissionthreadsSubmissionthreadIdActivitiesPostError = (HTTPValidationError);

export type ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetData = {
    query?: {
        /**
         * Cursor for the next page
         */
        cursor?: (string | null);
        /**
         * Page size
         */
        size?: number;
    };
};

export type ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetResponse = (TotalCursorPage_SubmittingOrgRead_);

export type ListSubmittingorgsApiV1ClinvarsubSubmittingorgsGetError = (HTTPValidationError);

export type CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostData = {
    body: SubmittingOrgCreate;
};

export type CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostResponse = (SubmittingOrgRead);

export type CreateSubmittingorgApiV1ClinvarsubSubmittingorgsPostError = (HTTPValidationError);

export type DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteData = {
    path: {
        submittingorg_id: string;
    };
};

export type DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteResponse = (SubmittingOrgRead);

export type DeleteSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdDeleteError = (HTTPValidationError);

export type GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetData = {
    path: {
        submittingorg_id: string;
    };
};

export type GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetResponse = (SubmittingOrgRead);

export type GetSubmittingorgByIdApiV1ClinvarsubSubmittingorgsSubmittingorgIdGetError = (HTTPValidationError);

export type UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutData = {
    body: SubmittingOrgUpdate;
    path: {
        submittingorg_id: string;
    };
};

export type UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutResponse = (SubmittingOrgRead);

export type UpdateSubmittingorgApiV1ClinvarsubSubmittingorgsSubmittingorgIdPutError = (HTTPValidationError);

export type UsersCurrentUserApiV1UsersMeGetResponse = (UserRead);

export type UsersCurrentUserApiV1UsersMeGetError = (unknown);

export type UsersPatchCurrentUserApiV1UsersMePatchData = {
    body: UserUpdate;
};

export type UsersPatchCurrentUserApiV1UsersMePatchResponse = (UserRead);

export type UsersPatchCurrentUserApiV1UsersMePatchError = (ErrorModel | unknown | HTTPValidationError);

export type UsersDeleteUserApiV1UsersIdDeleteData = {
    path: {
        id: string;
    };
};

export type UsersDeleteUserApiV1UsersIdDeleteResponse = (void);

export type UsersDeleteUserApiV1UsersIdDeleteError = (unknown | HTTPValidationError);

export type UsersUserApiV1UsersIdGetData = {
    path: {
        id: string;
    };
};

export type UsersUserApiV1UsersIdGetResponse = (UserRead);

export type UsersUserApiV1UsersIdGetError = (unknown | HTTPValidationError);

export type UsersPatchUserApiV1UsersIdPatchData = {
    body: UserUpdate;
    path: {
        id: string;
    };
};

export type UsersPatchUserApiV1UsersIdPatchResponse = (UserRead);

export type UsersPatchUserApiV1UsersIdPatchError = (ErrorModel | unknown | HTTPValidationError);

export type TestEmailApiV1UtilsTestEmailPostData = {
    query: {
        email_to: string;
    };
};

export type TestEmailApiV1UtilsTestEmailPostResponse = (Msg);

export type TestEmailApiV1UtilsTestEmailPostError = (HTTPValidationError);

export type DataVersionsInternalDataVersionsGetResponse = (unknown);

export type DataVersionsInternalDataVersionsGetError = unknown;

export type DataVersionsInternalDataVersionsPostResponse = (unknown);

export type DataVersionsInternalDataVersionsPostError = unknown;

export type FrontendSettingsInternalFrontendSettingsGetResponse = (unknown);

export type FrontendSettingsInternalFrontendSettingsGetError = unknown;

export type FrontendSettingsInternalFrontendSettingsPostResponse = (unknown);

export type FrontendSettingsInternalFrontendSettingsPostError = unknown;

export type ReverseProxyInternalProxyPathGetResponse = (unknown);

export type ReverseProxyInternalProxyPathGetError = unknown;

export type ReverseProxyInternalProxyPathPostResponse = (unknown);

export type ReverseProxyInternalProxyPathPostError = unknown;

export type AcmgInternalRemoteAcmgPathGetResponse = (unknown);

export type AcmgInternalRemoteAcmgPathGetError = unknown;

export type CnvAcmgInternalRemoteCnvAcmgPathGetResponse = (unknown);

export type CnvAcmgInternalRemoteCnvAcmgPathGetError = unknown;

export type Pubtator3ApiInternalRemotePubtator3ApiPathGetData = {
    path: {
        path: string;
    };
};

export type Pubtator3ApiInternalRemotePubtator3ApiPathGetResponse = (unknown);

export type Pubtator3ApiInternalRemotePubtator3ApiPathGetError = (HTTPValidationError);

export type VariantvalidatorInternalRemoteVariantvalidatorPathGetData = {
    path: {
        path: string;
    };
};

export type VariantvalidatorInternalRemoteVariantvalidatorPathGetResponse = (unknown);

export type VariantvalidatorInternalRemoteVariantvalidatorPathGetError = (HTTPValidationError);

export type VersionInternalVersionGetResponse = (unknown);

export type VersionInternalVersionGetError = unknown;

export type VersionInternalVersionPostResponse = (unknown);

export type VersionInternalVersionPostError = unknown;